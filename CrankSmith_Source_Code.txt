================================================================================
CRANKSMITH - COMPLETE SOURCE CODE BUNDLE
Next.js Cycling Gear Calculator with TypeScript & PWA
Generated: 2025-07-16T23:02:31.831Z
================================================================================

TABLE OF CONTENTS:
----------------------------------------
1. pages/index.js
2. pages/bike-fit.tsx
3. pages/_app.js
4. components/Layout.js
5. components/SearchableDropdown.tsx
6. components/Toast.tsx
7. components/ErrorBoundary.js
8. components/mobile/MobileDropdown.js
9. components/mobile/InstallPrompt.js
10. hooks/useCalculatorState.js
11. store/calculatorStore.js
12. lib/pwa-enhanced.ts
13. types/index.ts
14. package.json
15. next.config.js
16. tailwind.config.js
17. tsconfig.json
18. public/sw-enhanced.js
19. public/offline.html
20. components/ThemeToggle.js
21. styles/globals.css

Total Files: 21

================================================================================


############################################################
# FILE: pages/index.js
# Size: 11.94 KB | Lines: 271
############################################################

import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import Image from 'next/image';
import SEOHead from '../components/SEOHead';

export default function Home() {
  const router = useRouter();
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);
  }, []);

  const features = [
    {
      icon: '‚öôÔ∏è',
      title: 'Gear Calculator',
      description: 'Compare components and see exact performance impacts with real-world data',
      color: 'from-brand-orange to-brand-yellow'
    },
    {
      icon: 'üö¥‚Äç‚ôÇÔ∏è',
      title: 'Bike Fit Calculator',
      description: 'Calculate optimal saddle height, reach, and stack based on your body measurements',
      color: 'from-purple-500 to-pink-500'
    },
    {
      icon: 'üîß',
      title: 'Tire Pressure',
      description: 'Get perfect tire pressure for your weight, terrain, and riding style',
      color: 'from-brand-blue to-brand-purple'
    },
    {
      icon: 'üìä',
      title: 'Performance Analysis',
      description: 'Deep insights into speed, cadence, and efficiency across different terrains',
      color: 'from-brand-green to-emerald-400'
    }
  ];

  const benefits = [
    {
      icon: 'üí∞',
      title: 'Save Money',
      description: 'Avoid costly mistakes by understanding component compatibility before you buy'
    },
    {
      icon: 'üéØ',
      title: 'Perfect Setup',
      description: 'Get personalized recommendations based on your riding style and goals'
    },
    {
      icon: 'üöÄ',
      title: 'Real Data',
      description: 'Access accurate specifications for thousands of bike components'
    },
    {
      icon: 'ü§ñ',
      title: 'AI Expert',
      description: 'Get answers to technical questions with Riley, your AI bike expert'
    }
  ];

  return (
    <>
      <SEOHead
        title="CrankSmith - Premium Bike Gear Calculator & Analysis"
        description="Professional bike gear ratio calculator and component compatibility checker. Calculate gear ratios, check drivetrain compatibility, and optimize your bike setup with precision tools for serious cyclists."
        url="https://cranksmith.com"
        image="/og-image.jpg"
      />

      <div className="min-h-screen bg-neutral-50 dark:bg-neutral-950">
        {/* Hero Section */}
        <section className="relative overflow-hidden">
          {/* Background Pattern */}
          <div className="absolute inset-0 opacity-5">
            <div className="absolute inset-0 bg-gradient-to-br from-brand-orange via-brand-yellow to-brand-blue" />
          </div>
          
          <div className="container-responsive py-20 lg:py-32 relative">
            <div className={`max-w-4xl mx-auto text-center transition-all duration-1000 ${
              isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
            }`}>
              {/* Logo */}
              <div className="flex justify-center mb-8">
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-performance rounded-3xl blur-2xl opacity-30" />
                  <div className="relative w-20 h-20 bg-white dark:bg-neutral-800 rounded-3xl flex items-center justify-center shadow-2xl p-3">
                    <Image 
                      src="/cranksmith-logo.png" 
                      alt="CrankSmith" 
                      width={56}
                      height={56}
                      className="object-contain"
                    />
                  </div>
                </div>
              </div>

              <h1 className="text-responsive-5xl font-bold text-balance mb-6 text-neutral-900 dark:text-white">
                <span className="text-gradient-performance">Precision</span> tools for <span className="text-gradient-premium">serious</span> cyclists
              </h1>
              
              <p className="text-responsive-xl text-neutral-600 dark:text-neutral-300 max-w-2xl mx-auto mb-8 text-balance">
                Calculate gear ratios, optimize bike fit, check compatibility, and perfect your setup with professional-grade tools trusted by cyclists worldwide.
              </p>

              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                <Link href="/calculator" className="btn-primary">
                  <span>Start Calculating</span>
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                  </svg>
                </Link>
                
                <Link href="/tire-pressure" className="btn-secondary">
                  <span>Tire Pressure Tool</span>
                </Link>
              </div>

              <div className="mt-12 text-sm text-neutral-500 dark:text-neutral-400">
                Free ‚Ä¢ No signup required ‚Ä¢ Works offline
              </div>
            </div>
          </div>
        </section>

        {/* Features Section */}
        <section className="py-20 bg-neutral-100 dark:bg-neutral-900">
          <div className="container-responsive">
            <div className="text-center mb-16">
              <h2 className="text-responsive-3xl font-bold mb-4 text-neutral-900 dark:text-white">
                Professional Tools
              </h2>
              <p className="text-responsive-lg text-neutral-600 dark:text-neutral-300 max-w-2xl mx-auto">
                Everything you need to analyze and optimize your bike setup
              </p>
            </div>

            <div className="grid-responsive">
              {features.map((feature, index) => {
                const getFeatureHref = (title) => {
                  switch (title) {
                    case 'Gear Calculator': return '/calculator';
                    case 'Bike Fit Calculator': return '/bike-fit';
                    case 'Tire Pressure': return '/tire-pressure';
                    case 'AI Expert': return '/ask-riley';
                    default: return '/calculator';
                  }
                };
                const href = getFeatureHref(feature.title);
                
                return (
                  <Link
                    key={feature.title}
                    href={href}
                    className={`card-premium p-8 text-center hover-lift animation-delay-${index * 100} cursor-pointer`}
                  >
                    <div className={`w-16 h-16 mx-auto mb-6 rounded-2xl bg-gradient-to-br ${feature.color} flex items-center justify-center shadow-lg`}>
                      <span className="text-3xl">{feature.icon}</span>
                    </div>
                    <h3 className="text-xl font-semibold mb-3 text-neutral-900 dark:text-white">
                      {feature.title}
                    </h3>
                    <p className="text-neutral-600 dark:text-neutral-300 leading-relaxed">
                      {feature.description}
                    </p>
                  </Link>
                );
              })}
            </div>
          </div>
        </section>

        {/* Benefits Section */}
        <section className="py-20">
          <div className="container-responsive">
            <div className="text-center mb-16">
              <div className="flex items-center justify-center gap-3 mb-4">
                <div className="w-10 h-10 rounded-xl flex items-center justify-center p-1.5 shadow-lg bg-white dark:bg-neutral-800">
                  <Image 
                    src="/cranksmith-logo.png" 
                    alt="CrankSmith" 
                    width={32}
                    height={32}
                    className="object-contain"
                  />
                </div>
                <h2 className="text-responsive-3xl font-bold text-neutral-900 dark:text-white">
                  Why Choose <span className="bg-gradient-performance bg-clip-text text-transparent">CrankSmith</span>?
                </h2>
              </div>
              <p className="text-responsive-lg text-neutral-600 dark:text-neutral-300 max-w-2xl mx-auto">
                Trusted by cyclists, shops, and professionals worldwide
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
              {benefits.map((benefit, index) => (
                <div
                  key={benefit.title}
                  className={`card-premium p-6 flex items-start gap-4 hover-lift animation-delay-${index * 100}`}
                >
                  <div className="w-12 h-12 rounded-xl bg-gradient-premium flex items-center justify-center text-white text-xl flex-shrink-0">
                    {benefit.icon}
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold mb-2 text-neutral-900 dark:text-white">
                      {benefit.title}
                    </h3>
                    <p className="text-neutral-600 dark:text-neutral-300">
                      {benefit.description}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Ask Riley CTA Section */}
        <section className="py-20 bg-gradient-to-br from-neutral-900 to-neutral-800 text-white">
          <div className="container-responsive">
            <div className="max-w-4xl mx-auto text-center">
              <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-br from-brand-blue to-brand-purple flex items-center justify-center">
                <span className="text-4xl">ü§ñ</span>
              </div>
              <h2 className="text-responsive-3xl font-bold mb-4">
                Meet Riley, Your AI Bike Expert
              </h2>
              <p className="text-responsive-lg text-neutral-300 max-w-2xl mx-auto mb-8">
                Get instant answers to your bike questions from Riley, trained on thousands of maintenance manuals and brand support docs. Whether it's upgrades, installations, or compatibility - Riley knows bikes.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-8">
                <Link href="/ask-riley" className="btn-secondary bg-white text-neutral-900 hover:bg-neutral-100">
                  <span>Ask Riley Now</span>
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                  </svg>
                </Link>
              </div>
              <div className="flex flex-wrap gap-3 justify-center text-sm">
                <span className="px-3 py-1 bg-white/20 rounded-full">Upgrade Questions</span>
                <span className="px-3 py-1 bg-white/20 rounded-full">Installation Guides</span>
                <span className="px-3 py-1 bg-white/20 rounded-full">Compatibility Checks</span>
                <span className="px-3 py-1 bg-white/20 rounded-full">Maintenance Tips</span>
              </div>
            </div>
          </div>
        </section>

        {/* CTA Section */}
        <section className="py-20 bg-gradient-to-br from-brand-blue to-brand-purple">
          <div className="container-responsive text-center">
            <h2 className="text-responsive-3xl font-bold mb-4 text-white">
              Ready to Optimize Your Setup?
            </h2>
            <p className="text-responsive-lg text-blue-100 max-w-2xl mx-auto mb-8">
              Join thousands of cyclists who've already optimized their bike setup with CrankSmith
            </p>
            <Link href="/calculator" className="btn-secondary bg-white text-brand-blue hover:bg-neutral-100">
              Get Started Free
            </Link>
          </div>
        </section>
      </div>
    </>
  );
} 


############################################################
# FILE: pages/bike-fit.tsx
# Size: 25.28 KB | Lines: 536
############################################################

// pages/bike-fit.tsx - Comprehensive bike fit calculator with TypeScript
import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import Layout from '../components/Layout';
import ErrorBoundary from '../components/ErrorBoundary';
import { toast } from '../components/Toast';
import { 
  BodyMeasurements, 
  BikeFitResults, 
  BikeFitCalculations,
  FlexibilityLevel,
  RidingStyle,
  ExperienceLevel
} from '../types';

// Bike fit calculation methods and formulas
const bikeFitCalculations: BikeFitCalculations = {
  // Saddle height calculations using different methods
  saddleHeight: {
    lemond: (inseam: number) => inseam * 0.883,
    holmes: (inseam: number) => inseam * 0.885,
    hamley: (inseam: number) => inseam * 1.09,
    competitive: (inseam: number) => inseam * 0.875
  },
  
  // Reach calculations based on torso and arm length
  reach: (torso: number, armLength: number, flexibility: FlexibilityLevel, ridingStyle: RidingStyle) => {
    const baseReach = torso * 0.47 + armLength * 0.15;
    const flexibilityFactor = {
      low: 0.92,
      average: 1.0,
      high: 1.08
    }[flexibility] || 1.0;
    
    const styleFactor = {
      comfort: 0.90,
      endurance: 0.95,
      sport: 1.0,
      aggressive: 1.05,
      racing: 1.08
    }[ridingStyle] || 1.0;
    
    return baseReach * flexibilityFactor * styleFactor;
  },
  
  // Stack calculations for handlebar height
  stack: (torso: number, flexibility: FlexibilityLevel, ridingStyle: RidingStyle, experience: ExperienceLevel) => {
    const baseStack = torso * 0.48;
    
    const flexibilityFactor = {
      low: 1.15,
      average: 1.08,
      high: 1.0
    }[flexibility] || 1.08;
    
    const styleFactor = {
      comfort: 1.20,
      endurance: 1.10,
      sport: 1.0,
      aggressive: 0.92,
      racing: 0.85
    }[ridingStyle] || 1.0;
    
    const experienceFactor = {
      beginner: 1.10,
      intermediate: 1.05,
      advanced: 1.0,
      professional: 0.95
    }[experience] || 1.0;
    
    return baseStack * flexibilityFactor * styleFactor * experienceFactor;
  }
};

export default function BikeFit(): JSX.Element {
  // Body measurements state
  const [measurements, setMeasurements] = useState<BodyMeasurements>({
    inseam: '',
    torso: '',
    armLength: '',
    flexibility: 'average',
    ridingStyle: 'endurance',
    experience: 'intermediate',
    units: 'metric'
  });

  // Results state
  const [results, setResults] = useState<BikeFitResults | null>(null);
  const [showAdvanced, setShowAdvanced] = useState<boolean>(false);

  // Calculate bike fit when measurements change
  useEffect(() => {
    const { inseam, torso, armLength, flexibility, ridingStyle, experience } = measurements;
    
    if (inseam && torso && armLength) {
      const inseamMm = parseFloat(inseam);
      const torsoMm = parseFloat(torso);
      const armMm = parseFloat(armLength);
      
      if (inseamMm > 0 && torsoMm > 0 && armMm > 0) {
        const calculatedStack = bikeFitCalculations.stack(torsoMm, flexibility, ridingStyle, experience);
        
        const newResults: BikeFitResults = {
          saddleHeight: {
            lemond: bikeFitCalculations.saddleHeight.lemond(inseamMm),
            holmes: bikeFitCalculations.saddleHeight.holmes(inseamMm),
            hamley: bikeFitCalculations.saddleHeight.hamley(inseamMm),
            competitive: bikeFitCalculations.saddleHeight.competitive(inseamMm)
          },
          reach: bikeFitCalculations.reach(torsoMm, armMm, flexibility, ridingStyle),
          stack: calculatedStack,
          handlebarDrop: {
            comfort: calculatedStack - 20,
            sport: calculatedStack - 40,
            aggressive: calculatedStack - 60
          }
        };
        
        setResults(newResults);
      }
    }
  }, [measurements]);

  const handleMeasurementChange = (field: keyof BodyMeasurements, value: string) => {
    setMeasurements(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const formatMeasurement = (value: number, showMm: boolean = true): string => {
    if (!value || isNaN(value)) return '--';
    
    if (measurements.units === 'imperial') {
      const inches = value / 25.4;
      return `${inches.toFixed(1)}"`;
    }
    
    return showMm ? `${Math.round(value)}mm` : `${(value / 10).toFixed(1)}cm`;
  };

  const convertToDisplayUnits = (mm: number): string => {
    if (measurements.units === 'imperial') {
      return (mm / 25.4).toFixed(1);
    }
    return (mm / 10).toFixed(1);
  };

  const getUnitLabel = (): string => {
    return measurements.units === 'imperial' ? 'inches' : 'cm';
  };

  const handleInputChange = (field: 'inseam' | 'torso' | 'armLength', value: string): void => {
    // Convert input to mm for calculations
    let mmValue: number;
    if (measurements.units === 'imperial') {
      mmValue = parseFloat(value) * 25.4;
    } else {
      mmValue = parseFloat(value) * 10;
    }
    
    handleMeasurementChange(field, mmValue.toString());
  };

  const resetCalculator = (): void => {
    setMeasurements({
      inseam: '',
      torso: '',
      armLength: '',
      flexibility: 'average',
      ridingStyle: 'endurance',
      experience: 'intermediate',
      units: 'metric'
    });
    setResults(null);
    toast.info('Calculator reset successfully');
  };

  return (
    <>
      <Head>
        <title>Bike Fit Calculator - CrankSmith</title>
        <meta name="description" content="Calculate optimal saddle height, reach, and stack based on your body measurements. Professional bike fitting made simple." />
      </Head>

      <Layout>
        <div className="bg-[var(--bg-primary)]">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
            <div className="container mx-auto px-4 py-16">
              <div className="max-w-4xl mx-auto text-center">
                <h1 className="text-4xl md:text-5xl font-bold mb-6">
                  Bike Fit Calculator
                </h1>
                <p className="text-xl text-blue-100 mb-8 max-w-3xl mx-auto">
                  Calculate optimal saddle height, reach, and stack based on your body measurements. 
                  Get professional bike fitting recommendations tailored to your riding style.
                </p>
                
                {/* Quick stats */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
                  <div className="bg-blue-500/30 rounded-lg p-4">
                    <div className="text-2xl font-bold">4 Methods</div>
                    <div className="text-blue-100">Saddle height calculations</div>
                  </div>
                  <div className="bg-blue-500/30 rounded-lg p-4">
                    <div className="text-2xl font-bold">5 Styles</div>
                    <div className="text-blue-100">Riding position options</div>
                  </div>
                  <div className="bg-blue-500/30 rounded-lg p-4">
                    <div className="text-2xl font-bold">Instant</div>
                    <div className="text-blue-100">Real-time calculations</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="container mx-auto px-4 py-8">
            <div className="max-w-6xl mx-auto">
              <ErrorBoundary context="bike-fit">
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                  
                  {/* Input Panel */}
                  <div className="lg:col-span-1">
                    <div className="card sticky top-4">
                      <div className="flex items-center justify-between mb-6">
                        <h2 className="text-xl font-semibold text-[var(--text-primary)]">
                          Body Measurements
                        </h2>
                        <div className="flex items-center gap-2">
                          <button
                            onClick={() => handleMeasurementChange('units', measurements.units === 'metric' ? 'imperial' : 'metric')}
                            className="px-3 py-1 text-sm rounded-md border border-[var(--border-primary)] hover:bg-[var(--bg-secondary)] transition-colors"
                          >
                            {measurements.units === 'metric' ? 'cm' : 'in'}
                          </button>
                          <button
                            onClick={resetCalculator}
                            className="text-sm text-[var(--text-secondary)] hover:text-[var(--text-primary)] transition-colors"
                          >
                            Reset
                          </button>
                        </div>
                      </div>

                      <div className="space-y-6">
                        {/* Basic Measurements */}
                        <div>
                          <label className="block text-sm font-medium mb-2 text-[var(--text-primary)]">
                            Inseam Length ({getUnitLabel()})
                          </label>
                          <input
                            type="number"
                            value={measurements.inseam ? convertToDisplayUnits(parseFloat(measurements.inseam)) : ''}
                            onChange={(e) => handleInputChange('inseam', e.target.value)}
                            className="input-field w-full"
                            placeholder={`Enter inseam in ${getUnitLabel()}`}
                            step={measurements.units === 'metric' ? "0.1" : "0.25"}
                            min="0"
                          />
                          <p className="text-xs text-[var(--text-secondary)] mt-1">
                            Measure from floor to crotch while barefoot
                          </p>
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2 text-[var(--text-primary)]">
                            Torso Length ({getUnitLabel()})
                          </label>
                          <input
                            type="number"
                            value={measurements.torso ? convertToDisplayUnits(parseFloat(measurements.torso)) : ''}
                            onChange={(e) => handleInputChange('torso', e.target.value)}
                            className="input-field w-full"
                            placeholder={`Enter torso in ${getUnitLabel()}`}
                            step={measurements.units === 'metric' ? "0.1" : "0.25"}
                            min="0"
                          />
                          <p className="text-xs text-[var(--text-secondary)] mt-1">
                            From shoulder to hip bone
                          </p>
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2 text-[var(--text-primary)]">
                            Arm Length ({getUnitLabel()})
                          </label>
                          <input
                            type="number"
                            value={measurements.armLength ? convertToDisplayUnits(parseFloat(measurements.armLength)) : ''}
                            onChange={(e) => handleInputChange('armLength', e.target.value)}
                            className="input-field w-full"
                            placeholder={`Enter arm length in ${getUnitLabel()}`}
                            step={measurements.units === 'metric' ? "0.1" : "0.25"}
                            min="0"
                          />
                          <p className="text-xs text-[var(--text-secondary)] mt-1">
                            From shoulder to fingertip
                          </p>
                        </div>

                        {/* Riding Characteristics */}
                        <div>
                          <label className="block text-sm font-medium mb-2 text-[var(--text-primary)]">
                            Flexibility Level
                          </label>
                          <select
                            value={measurements.flexibility}
                            onChange={(e) => handleMeasurementChange('flexibility', e.target.value)}
                            className="input-field w-full"
                          >
                            <option value="low">Low - Limited flexibility</option>
                            <option value="average">Average - Normal flexibility</option>
                            <option value="high">High - Very flexible</option>
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2 text-[var(--text-primary)]">
                            Riding Style
                          </label>
                          <select
                            value={measurements.ridingStyle}
                            onChange={(e) => handleMeasurementChange('ridingStyle', e.target.value)}
                            className="input-field w-full"
                          >
                            <option value="comfort">Comfort - Upright, relaxed</option>
                            <option value="endurance">Endurance - Balanced performance</option>
                            <option value="sport">Sport - Performance oriented</option>
                            <option value="aggressive">Aggressive - Racing position</option>
                            <option value="racing">Racing - Maximum aerodynamics</option>
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium mb-2 text-[var(--text-primary)]">
                            Experience Level
                          </label>
                          <select
                            value={measurements.experience}
                            onChange={(e) => handleMeasurementChange('experience', e.target.value)}
                            className="input-field w-full"
                          >
                            <option value="beginner">Beginner - New to cycling</option>
                            <option value="intermediate">Intermediate - Regular rider</option>
                            <option value="advanced">Advanced - Experienced cyclist</option>
                            <option value="professional">Professional - Competitive racer</option>
                          </select>
                        </div>

                        <button
                          onClick={() => setShowAdvanced(!showAdvanced)}
                          className="text-sm text-blue-600 hover:text-blue-700 transition-colors"
                        >
                          {showAdvanced ? 'Hide' : 'Show'} Advanced Options
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Results Panel */}
                  <div className="lg:col-span-2">
                    {results ? (
                      <div className="space-y-6">
                        
                        {/* Saddle Height Results */}
                        <div className="card">
                          <h3 className="text-lg font-semibold mb-4 text-[var(--text-primary)] flex items-center gap-2">
                            <span className="text-blue-500">üìè</span>
                            Saddle Height Recommendations
                          </h3>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="bg-[var(--bg-secondary)] rounded-lg p-4">
                              <div className="text-sm text-[var(--text-secondary)] mb-1">LeMond Method (Recommended)</div>
                              <div className="text-2xl font-bold text-[var(--text-primary)]">
                                {formatMeasurement(results.saddleHeight.lemond)}
                              </div>
                              <div className="text-xs text-[var(--text-secondary)] mt-1">
                                Most widely used formula
                              </div>
                            </div>
                            <div className="bg-[var(--bg-secondary)] rounded-lg p-4">
                              <div className="text-sm text-[var(--text-secondary)] mb-1">Holmes Method</div>
                              <div className="text-xl font-semibold text-[var(--text-primary)]">
                                {formatMeasurement(results.saddleHeight.holmes)}
                              </div>
                              <div className="text-xs text-[var(--text-secondary)] mt-1">
                                Alternative calculation
                              </div>
                            </div>
                            {showAdvanced && (
                              <>
                                <div className="bg-[var(--bg-secondary)] rounded-lg p-4">
                                  <div className="text-sm text-[var(--text-secondary)] mb-1">Hamley Method</div>
                                  <div className="text-xl font-semibold text-[var(--text-primary)]">
                                    {formatMeasurement(results.saddleHeight.hamley)}
                                  </div>
                                  <div className="text-xs text-[var(--text-secondary)] mt-1">
                                    109% of inseam
                                  </div>
                                </div>
                                <div className="bg-[var(--bg-secondary)] rounded-lg p-4">
                                  <div className="text-sm text-[var(--text-secondary)] mb-1">Competitive Method</div>
                                  <div className="text-xl font-semibold text-[var(--text-primary)]">
                                    {formatMeasurement(results.saddleHeight.competitive)}
                                  </div>
                                  <div className="text-xs text-[var(--text-secondary)] mt-1">
                                    For racing positions
                                  </div>
                                </div>
                              </>
                            )}
                          </div>
                          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                            <p className="text-sm text-blue-700 dark:text-blue-300">
                              üí° <strong>Tip:</strong> Start with the LeMond method and adjust ¬±5-10mm based on comfort and pedaling efficiency.
                            </p>
                          </div>
                        </div>

                        {/* Reach and Stack Results */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div className="card">
                            <h3 className="text-lg font-semibold mb-4 text-[var(--text-primary)] flex items-center gap-2">
                              <span className="text-green-500">‚ÜîÔ∏è</span>
                              Reach
                            </h3>
                            <div className="text-center">
                              <div className="text-3xl font-bold text-[var(--text-primary)] mb-2">
                                {formatMeasurement(results.reach)}
                              </div>
                              <div className="text-sm text-[var(--text-secondary)]">
                                Horizontal distance from saddle to handlebars
                              </div>
                            </div>
                            <div className="mt-4 space-y-2 text-sm">
                              <div className="flex justify-between">
                                <span>Riding Style:</span>
                                <span className="capitalize font-medium">{measurements.ridingStyle}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>Flexibility:</span>
                                <span className="capitalize font-medium">{measurements.flexibility}</span>
                              </div>
                            </div>
                          </div>

                          <div className="card">
                            <h3 className="text-lg font-semibold mb-4 text-[var(--text-primary)] flex items-center gap-2">
                              <span className="text-purple-500">‚ÜïÔ∏è</span>
                              Stack
                            </h3>
                            <div className="text-center">
                              <div className="text-3xl font-bold text-[var(--text-primary)] mb-2">
                                {formatMeasurement(results.stack)}
                              </div>
                              <div className="text-sm text-[var(--text-secondary)]">
                                Vertical distance from bottom bracket to handlebars
                              </div>
                            </div>
                            <div className="mt-4 space-y-2 text-sm">
                              <div className="flex justify-between">
                                <span>Experience:</span>
                                <span className="capitalize font-medium">{measurements.experience}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>Style Factor:</span>
                                <span className="capitalize font-medium">{measurements.ridingStyle}</span>
                              </div>
                            </div>
                          </div>
                        </div>

                        {/* Additional Recommendations */}
                        <div className="card">
                          <h3 className="text-lg font-semibold mb-4 text-[var(--text-primary)] flex items-center gap-2">
                            <span className="text-orange-500">üéØ</span>
                            Additional Recommendations
                          </h3>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="text-center p-4 bg-[var(--bg-secondary)] rounded-lg">
                              <div className="text-sm text-[var(--text-secondary)] mb-1">Handlebar Drop (Comfort)</div>
                              <div className="text-lg font-semibold text-[var(--text-primary)]">
                                {formatMeasurement(results.handlebarDrop.comfort)}
                              </div>
                            </div>
                            <div className="text-center p-4 bg-[var(--bg-secondary)] rounded-lg">
                              <div className="text-sm text-[var(--text-secondary)] mb-1">Handlebar Drop (Sport)</div>
                              <div className="text-lg font-semibold text-[var(--text-primary)]">
                                {formatMeasurement(results.handlebarDrop.sport)}
                              </div>
                            </div>
                            <div className="text-center p-4 bg-[var(--bg-secondary)] rounded-lg">
                              <div className="text-sm text-[var(--text-secondary)] mb-1">Handlebar Drop (Aggressive)</div>
                              <div className="text-lg font-semibold text-[var(--text-primary)]">
                                {formatMeasurement(results.handlebarDrop.aggressive)}
                              </div>
                            </div>
                          </div>
                          
                          <div className="mt-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                            <h4 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">Important Notes:</h4>
                            <ul className="text-sm text-yellow-700 dark:text-yellow-300 space-y-1">
                              <li>‚Ä¢ These are starting point recommendations - fine-tuning is essential</li>
                              <li>‚Ä¢ Consider professional bike fitting for optimal results</li>
                              <li>‚Ä¢ Make small adjustments (2-3mm) and test over multiple rides</li>
                              <li>‚Ä¢ Account for saddle tilt, cleat position, and handlebar width</li>
                            </ul>
                          </div>
                        </div>

                      </div>
                    ) : (
                      <div className="card">
                        <div className="text-center py-16">
                          <div className="text-6xl mb-4">üö¥‚Äç‚ôÇÔ∏è</div>
                          <h3 className="text-xl font-semibold mb-2 text-[var(--text-primary)]">
                            Enter Your Measurements
                          </h3>
                          <p className="text-[var(--text-secondary)] max-w-md mx-auto">
                            Fill in your body measurements on the left to get personalized bike fit recommendations.
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </ErrorBoundary>
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
}


############################################################
# FILE: pages/_app.js
# Size: 4.04 KB | Lines: 113
############################################################

// pages/_app.js - FIXED VERSION
// Critical Bug Fix: Simplified mobile routing that doesn't confuse users
// Quick Win: Less intrusive mobile detection

import '../styles/globals.css';
import Head from 'next/head';
import Layout from '../components/Layout';
import Script from 'next/script';
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { registerServiceWorker, handleMobileRouting } from '../lib/pwa-utils';
import ErrorBoundary from '../components/ErrorBoundary';
import { ToastContainer } from '../components/Toast';

export default function App({ Component, pageProps }) {
  const router = useRouter();

  useEffect(() => {
    // Register service worker for PWA functionality
    registerServiceWorker();
    
    // Handle mobile routing suggestions (non-intrusive)
    handleMobileRouting(router);
  }, [router]);

  // Use different layout for mobile app
  const isMobileApp = router.pathname.startsWith('/mobile');
  
  if (isMobileApp) {
    return (
      <>
        <Head>
          <title>CrankSmith Mobile</title>
          <meta name="description" content="Mobile bike gear calculator" />
          <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
          <meta name="theme-color" content="#3B82F6" />
          <meta name="mobile-web-app-capable" content="yes" />
          <meta name="apple-mobile-web-app-status-bar-style" content="default" />
          <meta name="apple-mobile-web-app-title" content="CrankSmith" />
          <link rel="manifest" href="/manifest.json" />
          <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        </Head>
        
        {/* Google Analytics */}
        <Script
          src="https://www.googletagmanager.com/gtag/js?id=G-TR57T617HK"
          strategy="afterInteractive"
        />
        <Script id="ga-init" strategy="afterInteractive">
          {`
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'G-TR57T617HK', {
              page_path: window.location.pathname,
            });
          `}
        </Script>
        
        {/* Mobile App with Error Boundary */}
        <ErrorBoundary context="page">
          <Component {...pageProps} />
        </ErrorBoundary>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>CrankSmith</title>
        <meta name="description" content="Optimize your bike's performance with CrankSmith's gear ratio calculator" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#3B82F6" />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
        <meta name="apple-mobile-web-app-title" content="CrankSmith" />
        <link rel="manifest" href="/manifest.json" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="shortcut icon" href="/favicon.ico" />
      </Head>
      
      {/* Google Analytics */}
      <Script
        src="https://www.googletagmanager.com/gtag/js?id=G-TR57T617HK"
        strategy="afterInteractive"
      />
      <Script id="ga-init" strategy="afterInteractive">
        {`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'G-TR57T617HK', {
            page_path: window.location.pathname,
          });
        `}
      </Script>
      
      {/* Main App Content with Error Boundary */}
      <ErrorBoundary context="page">
        <Layout>
          <Component {...pageProps} />
        </Layout>
      </ErrorBoundary>
      
      {/* Toast Notifications */}
      <ToastContainer />
    </>
  );
}


############################################################
# FILE: components/Layout.js
# Size: 14.32 KB | Lines: 314
############################################################

"use client";

import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/router';
import InstallBanner from './InstallBanner';
import FloatingInstallButton from './FloatingInstallButton';
import FloatingAskRileyButton from './FloatingAskRileyButton';
import ErrorBoundary from './ErrorBoundary';
import ThemeToggle from './ThemeToggle';

export default function Layout({ children }) {
  const router = useRouter();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const [theme, setTheme] = useState('light');
  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 20);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  useEffect(() => {
    // Load theme preference
    const savedTheme = localStorage.getItem('cranksmith-theme') || 'light';
    setTheme(savedTheme);
    document.documentElement.setAttribute('data-theme', savedTheme);
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('cranksmith-theme', newTheme);
  };

  const navLinks = [
    { href: '/calculator', label: 'Gear Calculator', icon: '‚öôÔ∏è' },
    { href: '/bike-fit', label: 'Bike Fit', icon: 'üö¥‚Äç‚ôÇÔ∏è' },
    { href: '/tire-pressure', label: 'Tire Pressure', icon: 'üîß' },
    { href: '/ask-riley', label: 'Ask Riley', icon: 'ü§ñ' },
    { href: '/blog', label: 'Learn', icon: 'üìö' },
    { href: '/about', label: 'About', icon: 'üë•' },
  ];

  const isActiveLink = (href) => {
    return router.pathname === href;
  };

  return (
    <div className="min-h-screen transition-colors duration-300 bg-neutral-50 dark:bg-neutral-950 text-neutral-900 dark:text-white" suppressHydrationWarning>
      <ErrorBoundary context="component">
        <InstallBanner />
      </ErrorBoundary>
      
      {/* Premium Navigation Header */}
      <header 
        className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
          scrolled 
            ? 'bg-white/80 dark:bg-neutral-950/80 backdrop-blur-premium border-b border-neutral-200 dark:border-neutral-800'
            : 'bg-transparent'
        }`}
        suppressHydrationWarning
      >
        <nav className="container-responsive">
          <div className="flex items-center justify-between h-20">
            {/* Logo */}
            <Link href="/" className="flex items-center gap-3 group">
              <div className="relative">
                <div className="absolute inset-0 bg-gradient-performance rounded-2xl blur-lg opacity-0 group-hover:opacity-50 transition-opacity duration-300" />
                <div className="relative w-12 h-12 rounded-2xl flex items-center justify-center shadow-lg p-1 bg-white dark:bg-neutral-800">
                  <Image 
                    src="/cranksmith-logo.png" 
                    alt="CrankSmith" 
                    width={40}
                    height={40}
                    className="object-contain"
                  />
                </div>
              </div>
              <div className="flex flex-col">
                <span className="text-xl font-bold bg-gradient-performance bg-clip-text text-transparent">
                  CrankSmith
                </span>
                <span className="text-xs font-medium text-neutral-500 dark:text-neutral-400">
                  Precision Gear Analysis
                </span>
              </div>
            </Link>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center gap-8">
              {navLinks.map((link) => (
                <Link
                  key={link.href}
                  href={link.href}
                  className={`relative px-4 py-2 text-sm font-medium transition-all duration-300 ${
                    isActiveLink(link.href)
                      ? 'text-brand-blue'
                      : 'text-neutral-600 dark:text-neutral-300 hover:text-neutral-900 dark:hover:text-white'
                  }`}
                >
                  {isActiveLink(link.href) && (
                    <div className="absolute inset-0 bg-brand-blue/10 rounded-xl" />
                  )}
                  <span className="relative flex items-center gap-2">
                    <span className="text-base">{link.icon}</span>
                    {link.label}
                  </span>
                </Link>
              ))}
            </div>

            {/* Right Actions */}
            <div className="hidden md:flex items-center gap-4">
              <ThemeToggle theme={theme} toggleTheme={toggleTheme} />
              
              <Link 
                href="https://instagram.com/cranksmithapp" 
                target="_blank" 
                rel="noopener noreferrer"
                className={`p-2 rounded-xl hover:text-brand-blue transition-colors ${
                  'text-neutral-600 dark:text-neutral-300'
                }`}
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                </svg>
              </Link>
            </div>

            {/* Mobile Menu Button */}
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="md:hidden p-2 rounded-xl transition-colors text-neutral-600 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-800"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                {isMobileMenuOpen ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                )}
              </svg>
            </button>
          </div>
        </nav>

        {/* Mobile Navigation Menu */}
        <div className={`md:hidden transition-all duration-300 ease-out-expo ${
          isMobileMenuOpen ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'
        } overflow-hidden backdrop-blur-premium border-t bg-white/95 dark:bg-neutral-950/95 border-neutral-200 dark:border-neutral-800`}>
          <nav className="container-responsive py-6">
            <div className="space-y-4">
              {navLinks.map((link) => (
                <Link
                  key={link.href}
                  href={link.href}
                  className={`flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 ${
                    isActiveLink(link.href)
                      ? 'bg-brand-blue/10 text-brand-blue'
                      : 'text-neutral-600 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-800'
                  }`}
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  <span className="text-lg">{link.icon}</span>
                  <span className="font-medium">{link.label}</span>
                </Link>
              ))}
            </div>
            
            <div className="flex items-center justify-between mt-6 pt-6 border-t border-neutral-200 dark:border-neutral-800">
              <div className="flex items-center gap-4">
                <ThemeToggle theme={theme} toggleTheme={toggleTheme} />
                <Link 
                  href="https://instagram.com/cranksmithapp" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="p-2 rounded-xl hover:text-brand-blue transition-colors text-neutral-600 dark:text-neutral-300"
                >
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                  </svg>
                </Link>
              </div>
            </div>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="pt-20">
        {children}
      </main>

      {/* Floating Install Button */}
      <ErrorBoundary context="component">
        <FloatingInstallButton />
      </ErrorBoundary>

      {/* Floating Ask Riley Button */}
      <ErrorBoundary context="component">
        <FloatingAskRileyButton />
      </ErrorBoundary>

      {/* Premium Footer */}
      <footer className="border-t mt-20 py-12 border-neutral-200 dark:border-neutral-800 bg-neutral-50 dark:bg-neutral-900">
        <div className="container-responsive">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Brand Section */}
            <div>
              <div className="flex items-center gap-3 mb-4">
                <div className={`w-8 h-8 rounded-lg flex items-center justify-center p-1 ${
                  'bg-white dark:bg-neutral-800'
                }`}>
                  <Image 
                    src="/cranksmith-logo.png" 
                    alt="CrankSmith" 
                    width={24}
                    height={24}
                    className="object-contain"
                  />
                </div>
                <span className="text-lg font-bold bg-gradient-performance bg-clip-text text-transparent">
                  CrankSmith
                </span>
              </div>
              <p className={`text-sm leading-relaxed ${
                'text-neutral-600 dark:text-neutral-400'
              }`}>
                Precision tools for modern cyclists. Analyze your gear ratios, optimize your setup, and ride with confidence.
              </p>
            </div>

            {/* Quick Links */}
            <div>
              <h3 className={`font-semibold mb-4 ${
                'text-neutral-900 dark:text-white'
              }`}>Tools</h3>
              <nav className="space-y-2">
                {navLinks.map((link) => (
                  <Link
                    key={link.href}
                    href={link.href}
                    className={`block text-sm hover:text-brand-blue transition-colors ${
                      'text-neutral-600 dark:text-neutral-400'
                    }`}
                  >
                    {link.label}
                  </Link>
                ))}
              </nav>
            </div>

            {/* Contact */}
            <div>
              <h3 className={`font-semibold mb-4 ${
                'text-neutral-900 dark:text-white'
              }`}>Connect</h3>
              <div className="space-y-2">
                <a 
                  href="mailto:mike@cranksmith.com" 
                  className={`block text-sm hover:text-brand-blue transition-colors ${
                    'text-neutral-600 dark:text-neutral-400'
                  }`}
                >
                  mike@cranksmith.com
                </a>
                <a 
                  href="https://instagram.com/cranksmithapp" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className={`block text-sm hover:text-brand-blue transition-colors ${
                    'text-neutral-600 dark:text-neutral-400'
                  }`}
                >
                  @cranksmithapp
                </a>
              </div>
            </div>
          </div>

          <div className={`border-t mt-8 pt-8 flex flex-col md:flex-row justify-between items-center ${
            'border-neutral-200 dark:border-neutral-800'
          }`}>
            <p className={`text-xs ${
              'text-neutral-500 dark:text-neutral-400'
            }`}>
              ¬© {new Date().getFullYear()} CrankSmith. All rights reserved.
            </p>
            <div className="flex items-center gap-4 mt-4 md:mt-0">
              <Link href="/docs" className={`text-xs hover:text-brand-blue transition-colors ${
                'text-neutral-500 dark:text-neutral-400'
              }`}>
                Docs
              </Link>
              <Link href="/blog" className={`text-xs hover:text-brand-blue transition-colors ${
                'text-neutral-500 dark:text-neutral-400'
              }`}>
                Blog
              </Link>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}




############################################################
# FILE: components/SearchableDropdown.tsx
# Size: 14.70 KB | Lines: 460
############################################################

// components/SearchableDropdown.tsx - Enhanced with TypeScript and performance optimizations
import React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';
import { FixedSizeList as List } from 'react-window';
import { DropdownOption, GroupedOptions } from '../types';

interface SearchableDropdownProps {
  options: DropdownOption[];
  value?: DropdownOption | string | null;
  onChange: (value: DropdownOption | null) => void;
  placeholder?: string;
  groupBy?: (option: DropdownOption) => string;
  className?: string;
  searchable?: boolean;
  debounceMs?: number;
}

export default function SearchableDropdown({
  options = [],
  value,
  onChange,
  placeholder = 'Select an option',
  groupBy,
  className = '',
  searchable = true,
  debounceMs = 150
}: SearchableDropdownProps): JSX.Element {

  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState<string>('');
  const [highlightedIndex, setHighlightedIndex] = useState<number>(0);
  const triggerRef = useRef<HTMLButtonElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const listRef = useRef<List>(null);
  const focusTimeout = useRef<NodeJS.Timeout | null>(null);
  const debounceTimeout = useRef<NodeJS.Timeout | null>(null);

  // Debounced search implementation
  useEffect(() => {
    if (debounceTimeout.current) {
      clearTimeout(debounceTimeout.current);
    }
    
    debounceTimeout.current = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
    }, debounceMs);

    return () => {
      if (debounceTimeout.current) {
        clearTimeout(debounceTimeout.current);
      }
    };
  }, [searchTerm, debounceMs]);

  // Find selected option with improved type safety
  const selectedOption = useMemo((): DropdownOption | null => {
    if (!value) return null;
    
    if (typeof value === 'object' && value.id) {
      return options.find(opt => opt.id === value.id) || null;
    } else {
      return options.find(opt => opt.id === value) || null;
    }
  }, [options, value]);

  // Enhanced filtering with debounced search and better performance
  const filteredOptions = useMemo((): DropdownOption[] => {
    if (!debouncedSearchTerm || !searchable) return options;
    
    const searchLower = debouncedSearchTerm.toLowerCase();
    const searchTerms = searchLower.split(' ').filter(Boolean);
    
    return options.filter(option => {
      if (!option) return false;
      
      const searchableText = [
        option.model || '',
        option.variant || '',
        option.label || '',
        option.speeds || '',
        option.weight?.toString() || '',
        option.teeth?.join(',') || ''
      ].join(' ').toLowerCase();
      
      // All search terms must match
      return searchTerms.every(term => searchableText.includes(term));
    });
  }, [options, debouncedSearchTerm, searchable]);

  // Group options if groupBy function provided with better typing
  const groupedOptions = useMemo((): GroupedOptions => {
    if (!groupBy) return { 'All': filteredOptions };
    
    return filteredOptions.reduce((acc: GroupedOptions, option) => {
      const group = groupBy(option);
      if (!acc[group]) acc[group] = [];
      acc[group].push(option);
      return acc;
    }, {});
  }, [filteredOptions, groupBy]);

  // Flatten grouped options for virtualization with proper typing
  interface FlattenedItem {
    type: 'group' | 'option';
    name?: string;
    data?: DropdownOption;
  }

  const flattenedOptions = useMemo((): FlattenedItem[] => {
    const flattened: FlattenedItem[] = [];
    Object.entries(groupedOptions).forEach(([groupName, groupOptions]) => {
      if (groupBy && Object.keys(groupedOptions).length > 1) {
        flattened.push({ type: 'group', name: groupName });
      }
      flattened.push(...groupOptions.map(opt => ({ type: 'option' as const, data: opt })));
    });
    
    return flattened;
  }, [groupedOptions, groupBy]);

  // Handle selection with proper typing
  const handleSelect = useCallback((option: DropdownOption | null): void => {
    if (option) {
      onChange(option);
      setIsOpen(false);
      setSearchTerm('');
      setDebouncedSearchTerm('');
      setHighlightedIndex(0);
    }
  }, [onChange]);

  // Handle keyboard navigation with proper typing
  const handleKeyDown = useCallback((e: React.KeyboardEvent): void => {
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setHighlightedIndex(prev => {
          const newIndex = Math.min(prev + 1, flattenedOptions.length - 1);
          // Skip group headers
          if (flattenedOptions[newIndex]?.type === 'group' && newIndex < flattenedOptions.length - 1) {
            return newIndex + 1;
          }
          return newIndex;
        });
        break;
      case 'ArrowUp':
        e.preventDefault();
        setHighlightedIndex(prev => {
          const newIndex = Math.max(prev - 1, 0);
          // Skip group headers
          if (flattenedOptions[newIndex]?.type === 'group' && newIndex > 0) {
            return newIndex - 1;
          }
          return newIndex;
        });
        break;
      case 'Enter':
        e.preventDefault();
        const highlighted = flattenedOptions[highlightedIndex];
        if (highlighted?.type === 'option' && highlighted.data) {
          handleSelect(highlighted.data);
        }
        break;
      case 'Escape':
        e.preventDefault();
        setIsOpen(false);
        break;
    }
  }, [flattenedOptions, highlightedIndex, handleSelect]);

  // Scroll highlighted item into view
  useEffect(() => {
    if (listRef.current && highlightedIndex >= 0) {
      listRef.current.scrollToItem(highlightedIndex, 'smart');
    }
  }, [highlightedIndex]);

  // Click outside to close with proper typing
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent | TouchEvent): void => {
      const target = event.target as Node;
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(target) &&
        triggerRef.current &&
        !triggerRef.current.contains(target)
      ) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      document.addEventListener('touchstart', handleClickOutside);
      
      // Focus search input with cleanup
      if (inputRef.current && searchable) {
        focusTimeout.current = setTimeout(() => inputRef.current?.focus(), 100);
      }
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('touchstart', handleClickOutside);
      
      // Clear focus timeout to prevent memory leaks
      if (focusTimeout.current) {
        clearTimeout(focusTimeout.current);
        focusTimeout.current = null;
      }
    };
  }, [isOpen, searchable]);

  // Reset highlighted index when search changes
  useEffect(() => {
    setHighlightedIndex(0);
  }, [debouncedSearchTerm]);

  const displayValue = selectedOption ? 
    `${selectedOption.model} ${selectedOption.variant}`.trim() : '';

  // Row renderer for react-window with proper typing
  interface RowProps {
    index: number;
    style: React.CSSProperties;
  }

  const Row = ({ index, style }: RowProps): JSX.Element => {
    const item = flattenedOptions[index];
    
    if (item.type === 'group') {
      return (
        <div
          style={{
            ...style,
            padding: '8px 12px',
            background: 'var(--bg-secondary)',
            color: 'var(--text-secondary)',
            borderBottom: '1px solid var(--border-subtle)',
            fontSize: '12px',
            fontWeight: '600',
            position: 'sticky',
            top: 0,
            zIndex: 1
          }}
        >
          {item.name}
        </div>
      );
    }

    const option = item.data;
    if (!option) return <div style={style}></div>;
    
    const isHighlighted = index === highlightedIndex;
    const isSelected = selectedOption?.id === option.id;

    return (
      <div
        style={{
          ...style,
          padding: '12px 16px',
          cursor: 'pointer',
          background: isHighlighted 
            ? 'rgb(var(--brand-blue))' 
            : isSelected 
              ? 'rgb(var(--bg-tertiary))' 
              : 'transparent',
          color: isHighlighted ? 'white' : 'rgb(var(--text-primary))',
          transition: 'background-color 0.1s ease'
        }}
        onClick={() => handleSelect(option)}
        onMouseEnter={() => setHighlightedIndex(index)}
      >
        <div style={{ display: 'flex', alignItems: 'baseline', justifyContent: 'space-between', gap: '12px' }}>
          <div style={{ fontWeight: '500', fontSize: '16px' }}>
            {option.model}
          </div>
          <div 
            style={{ 
              fontSize: '14px',
              fontWeight: '400',
              flexShrink: 0,
              color: isHighlighted 
                ? 'rgba(255,255,255,0.85)' 
                : 'rgb(var(--text-tertiary))'
            }}
          >
            {option.weight}g
          </div>
        </div>
        <div 
          style={{ 
            fontSize: '14px',
            marginTop: '4px',
            color: isHighlighted 
              ? 'rgba(255,255,255,0.75)' 
              : 'rgb(var(--text-tertiary))'
          }}
        >
          {option.variant}
        </div>
      </div>
    );
  };



  return (
    <div className={`relative searchable-dropdown ${className}`}>
      {/* Trigger Button */}
      <button
        ref={triggerRef}
        type="button"
        disabled={options.length === 0}
        onClick={() => {
          if (options.length === 0) {
            // console.log('üñ±Ô∏è Dropdown trigger clicked but no options available');
            return;
          }
          // console.log('üñ±Ô∏è Dropdown trigger clicked:', {
          //   placeholder,
          //   currentIsOpen: isOpen,
          //   willBeOpen: !isOpen,
          //   optionsLength: options?.length || 0,
          //   flattenedOptionsLength: flattenedOptions?.length || 0
          // });
          setIsOpen(!isOpen);
        }}
        className={`input-field flex items-center justify-between w-full ${
          options.length === 0 ? 'cursor-not-allowed opacity-60' : 'cursor-pointer'
        }`}
        style={{ 
          background: isOpen ? 'rgb(var(--bg-elevated))' : 'rgb(var(--bg-secondary))',
          borderColor: isOpen ? 'rgb(var(--border-focus))' : 'rgb(var(--border-primary))',
          color: 'rgb(var(--text-primary))',
          minHeight: '48px'
        }}
      >
        <span className={displayValue ? '' : 'opacity-60'} style={{ fontSize: '16px' }}>
          {displayValue || placeholder}
        </span>
        <svg 
          className={`w-4 h-4 transition-transform ${isOpen ? 'rotate-180' : ''}`}
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {/* Dropdown Portal */}
      {isOpen && (
        <div
          ref={dropdownRef}
          className="absolute z-[9999] w-full mt-1"
          style={{
            background: 'rgb(var(--bg-elevated))',
            boxShadow: 'var(--shadow-lg)',
            borderRadius: '12px',
            border: '1px solid rgb(var(--border-primary))',
            maxHeight: '400px',
            display: 'flex',
            flexDirection: 'column'
          }}
        >
          {/* Search Input */}
          <div className="p-3 border-b" style={{ borderColor: 'rgb(var(--border-primary))' }}>
            <input
              ref={inputRef}
              type="text"
              placeholder="Type to search..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onKeyDown={handleKeyDown}
              className="input-premium"
              style={{ 
                fontSize: '16px'
              }}
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          {/* Options List with Virtualization */}
          <div style={{ flex: 1, minHeight: 0 }}>
            {flattenedOptions.length === 0 ? (
              <div className="px-4 py-6 text-center">
                <div className="text-base mb-2" style={{ color: 'var(--text-secondary)' }}>
                  {searchTerm ? 'No matching components found' : 'No components available'}
                </div>
                {!searchTerm && (
                  <div className="text-sm" style={{ color: 'var(--text-tertiary)' }}>
                    {options.length === 0 ? 'Please select a bike type first' : 'Try adjusting your search'}
                  </div>
                )}
              </div>
            ) : (
              <>
                {/* console.log('üìã About to render List:', {
                  placeholder,
                  flattenedOptionsLength: flattenedOptions.length,
                  listHeight: Math.min(300, flattenedOptions.length * 64),
                  itemCount: flattenedOptions.length
                }) */}
                <List
                  ref={listRef}
                  height={Math.min(300, flattenedOptions.length * 64)}
                  itemCount={flattenedOptions.length}
                  itemSize={64}
                  width="100%"
                  overscanCount={5}
                >
                  {Row}
                </List>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

// Export grouping functions for backward compatibility
export const groupByBrand = (component: DropdownOption): string => {
  if (component.model?.includes('Shimano')) return 'Shimano';
  if (component.model?.includes('SRAM')) return 'SRAM';
  if (component.model?.includes('Campagnolo')) return 'Campagnolo';
  return 'Other';
};

export const groupBySeries = (component: DropdownOption): string => {
  const model = component.model?.toLowerCase() || '';
  
  // Shimano series
  if (model.includes('xtr') && model.includes('di2')) return 'XTR Di2';
  if (model.includes('dura-ace')) return 'Dura-Ace';
  if (model.includes('ultegra')) return 'Ultegra';
  if (model.includes('105')) return '105';
  if (model.includes('xtr')) return 'XTR';
  if (model.includes('xt ')) return 'XT';
  if (model.includes('slx')) return 'SLX';
  if (model.includes('deore')) return 'Deore';
  if (model.includes('grx')) return 'GRX';
  
  // SRAM series
  if (model.includes('red')) return 'Red';
  if (model.includes('force')) return 'Force';
  if (model.includes('rival')) return 'Rival';
  if (model.includes('gx')) return 'GX';
  if (model.includes('nx')) return 'NX';
  
  return 'Other';
};



############################################################
# FILE: components/Toast.tsx
# Size: 3.88 KB | Lines: 148
############################################################

import React, { useState, useEffect } from 'react';
import { Toast, ToastType, ToastAPI } from '../types';

let toastId = 0;
const toastStack: Toast[] = [];
let toastListener: ((toasts: Toast[]) => void) | null = null;

export const toast: ToastAPI = {
  success: (message: string, duration = 4000) => {
    showToast({ type: 'success', message, duration });
  },
  error: (message: string, duration = 6000) => {
    showToast({ type: 'error', message, duration });
  },
  warning: (message: string, duration = 5000) => {
    showToast({ type: 'warning', message, duration });
  },
  info: (message: string, duration = 4000) => {
    showToast({ type: 'info', message, duration });
  }
};

function showToast({ type, message, duration }: { type: ToastType; message: string; duration: number }): void {
  const id = ++toastId;
  const newToast: Toast = { id, type, message, duration };
  
  toastStack.push(newToast);
  
  if (toastListener) {
    toastListener([...toastStack]);
  }
  
  // Auto remove after duration
  setTimeout(() => {
    removeToast(id);
  }, duration);
}

function removeToast(id: number): void {
  const index = toastStack.findIndex(toast => toast.id === id);
  if (index > -1) {
    toastStack.splice(index, 1);
    if (toastListener) {
      toastListener([...toastStack]);
    }
  }
}

export function ToastContainer(): JSX.Element | null {
  const [toasts, setToasts] = useState<Toast[]>([]);

  useEffect(() => {
    toastListener = setToasts;
    setToasts([...toastStack]);
    
    return () => {
      toastListener = null;
    };
  }, []);

  if (toasts.length === 0) return null;

  return (
    <div className="fixed top-4 right-4 z-50 space-y-2 max-w-sm">
      {toasts.map((toast) => (
        <ToastItem 
          key={toast.id} 
          toast={toast} 
          onClose={() => removeToast(toast.id)} 
        />
      ))}
    </div>
  );
}

interface ToastItemProps {
  toast: Toast;
  onClose: () => void;
}

function ToastItem({ toast, onClose }: ToastItemProps): JSX.Element {
  const [isVisible, setIsVisible] = useState<boolean>(false);

  useEffect(() => {
    // Trigger animation after mount
    const timer = setTimeout(() => setIsVisible(true), 10);
    return () => clearTimeout(timer);
  }, []);

  const handleClose = (): void => {
    setIsVisible(false);
    setTimeout(onClose, 300); // Wait for animation
  };

  const typeStyles = {
    success: {
      bg: 'bg-green-500/10 border-green-500/30',
      icon: '‚úì',
      iconColor: 'text-green-500'
    },
    error: {
      bg: 'bg-red-500/10 border-red-500/30',
      icon: '‚úï',
      iconColor: 'text-red-500'
    },
    warning: {
      bg: 'bg-yellow-500/10 border-yellow-500/30',
      icon: '‚ö†',
      iconColor: 'text-yellow-500'
    },
    info: {
      bg: 'bg-blue-500/10 border-blue-500/30',
      icon: '‚Ñπ',
      iconColor: 'text-blue-500'
    }
  };

  const style = typeStyles[toast.type] || typeStyles.info;

  return (
    <div
      className={`
        ${style.bg} border backdrop-blur-sm rounded-lg p-4 shadow-lg
        transform transition-all duration-300 ease-out
        ${isVisible ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}
      `}
    >
      <div className="flex items-start gap-3">
        <div className={`${style.iconColor} font-bold text-lg leading-none mt-0.5`}>
          {style.icon}
        </div>
        <div className="flex-1 min-w-0">
          <p className="text-sm text-[var(--text-primary)] break-words">
            {toast.message}
          </p>
        </div>
        <button
          onClick={handleClose}
          className="text-[var(--text-secondary)] hover:text-[var(--text-primary)] transition-colors"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  );
}


############################################################
# FILE: components/ErrorBoundary.js
# Size: 4.86 KB | Lines: 134
############################################################

// components/ErrorBoundary.js - Error boundary component to catch React errors
import React from 'react';

export default class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // Log the error to console and any error reporting service
    console.error('ErrorBoundary caught an error:', error);
    console.error('Error info:', errorInfo);
    
    // Store error details for debugging
    this.setState({
      error: error,
      errorInfo: errorInfo
    });

    // You can also log the error to an error reporting service here
    // e.g., Sentry, LogRocket, etc.
  }

  handleReset = () => {
    this.setState({ hasError: false, error: null, errorInfo: null });
  }

  handleReload = () => {
    window.location.reload();
  }

  render() {
    if (this.state.hasError) {
      // Fallback UI based on the context
      const { fallback, context = 'component' } = this.props;
      
      if (fallback) {
        return fallback;
      }

      // Default fallback UI with different styles based on context
      const containerStyle = context === 'page' ? 'min-h-screen' : 'min-h-[200px]';
      const titleSize = context === 'page' ? 'text-xl' : 'text-lg';
      
      return (
        <div className={`${containerStyle} flex items-center justify-center p-8 error-boundary-fallback`}>
          <div className="text-center max-w-md mx-auto">
            <div className="mb-6">
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-red-100 flex items-center justify-center">
                <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
            
            <h3 className={`${titleSize} font-semibold mb-2`} style={{ color: 'var(--text-primary)' }}>
              Something went wrong
            </h3>
            
            <p className="text-sm mb-6" style={{ color: 'var(--text-secondary)' }}>
              {context === 'page' 
                ? "We're having trouble loading this page. Please try refreshing or contact support if the issue persists."
                : "This component encountered an error. You can try refreshing the page or continue using other features."
              }
            </p>
            
            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <button
                onClick={this.handleReset}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm font-medium"
              >
                Try Again
              </button>
              
              <button
                onClick={this.handleReload}
                className="px-4 py-2 border rounded-md transition-colors text-sm font-medium"
                style={{ 
                  borderColor: 'var(--border-light)', 
                  color: 'var(--text-primary)',
                  backgroundColor: 'var(--bg-secondary)'
                }}
                onMouseEnter={(e) => {
                  e.target.style.backgroundColor = 'var(--bg-tertiary)';
                }}
                onMouseLeave={(e) => {
                  e.target.style.backgroundColor = 'var(--bg-secondary)';
                }}
              >
                Refresh Page
              </button>
            </div>
            
            {/* Debug info in development */}
            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="mt-6 text-left">
                <summary className="cursor-pointer text-sm font-medium mb-2" style={{ color: 'var(--text-tertiary)' }}>
                  Debug Info (Development Only)
                </summary>
                <pre className="text-xs p-3 rounded overflow-auto max-h-40" style={{ 
              backgroundColor: 'var(--bg-tertiary)',
              color: 'var(--text-primary)',
              border: `1px solid var(--border-primary)`
            }}>
                  {this.state.error.toString()}
                  {this.state.errorInfo && this.state.errorInfo.componentStack}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// HOC wrapper for functional components
export const withErrorBoundary = (Component, errorBoundaryProps = {}) => {
  return function WrappedComponent(props) {
    return (
      <ErrorBoundary {...errorBoundaryProps}>
        <Component {...props} />
      </ErrorBoundary>
    );
  };
}; 


############################################################
# FILE: components/mobile/MobileDropdown.js
# Size: 10.18 KB | Lines: 284
############################################################

// components/mobile/MobileDropdown.js - Touch-optimized dropdown for mobile with proper opacity fix
import { useState, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';

export default function MobileDropdown({
  options = [],
  value,
  onChange,
  placeholder = 'Select option',
  searchable = false
}) {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredOptions, setFilteredOptions] = useState(options);
  const dropdownRef = useRef(null);
  const searchInputRef = useRef(null);
  const portalRef = useRef(null);

  // Filter options based on search
  useEffect(() => {
    if (!searchable || !searchTerm) {
      setFilteredOptions(options);
      return;
    }

    const filtered = options.filter(option => {
      if (!option || !option.label) return false;
      
      const searchLower = searchTerm.toLowerCase();
      const labelMatch = option.label.toLowerCase().includes(searchLower);
      const subtitleMatch = option.subtitle ? 
        option.subtitle.toLowerCase().includes(searchLower) : 
        false;
      
      return labelMatch || subtitleMatch;
    });
    setFilteredOptions(filtered);
  }, [options, searchTerm, searchable]);

  // Handle click outside to close
  useEffect(() => {
    let focusTimeoutId = null;
    
    const handleClickOutside = (event) => {
      if (
        (dropdownRef.current && dropdownRef.current.contains(event.target)) ||
        (portalRef.current && portalRef.current.contains(event.target))
      ) {
        // Click is inside dropdown trigger or portal panel, do nothing
        return;
      }
      setIsOpen(false);
    };

    if (isOpen) {
      document.addEventListener('touchstart', handleClickOutside);
      document.addEventListener('mousedown', handleClickOutside);
      
      // Prevent body scroll when dropdown is open
      document.body.style.overflow = 'hidden';
      
      // Focus search input if searchable
      if (searchable && searchInputRef.current) {
        focusTimeoutId = setTimeout(() => {
          searchInputRef.current.focus();
        }, 100);
      }
    } else {
      document.body.style.overflow = '';
    }

    return () => {
      document.removeEventListener('touchstart', handleClickOutside);
      document.removeEventListener('mousedown', handleClickOutside);
      document.body.style.overflow = '';
      
      // Clear focus timeout to prevent memory leaks
      if (focusTimeoutId) {
        clearTimeout(focusTimeoutId);
      }
    };
  }, [isOpen, searchable]);

  const handleSelect = (option) => {
    if (option && option.value !== undefined) {
      onChange(option.value);
      setIsOpen(false);
      setSearchTerm('');
    }
  };

  const handleOpen = () => {
    setIsOpen(true);
    setSearchTerm('');
  };

  // Get display value with safety checks
  const displayValue = value ? 
    (typeof value === 'object' ? 
      `${value.model || ''} ${value.variant || ''}`.trim() : 
      options.find(opt => opt && opt.value === value)?.label || String(value)
    ) : '';

  return (
    <div className="mobile-dropdown" ref={dropdownRef} style={{ position: 'relative' }}>
      {/* Trigger Button */}
      <button
        type="button"
        onClick={handleOpen}
        className="input-premium"
        style={{
          minHeight: '56px',
          cursor: 'pointer',
          position: 'relative',
          zIndex: 30,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          textAlign: 'left'
        }}
      >
        <div className="flex-1">
          {displayValue ? (
            <div>
              <div className="font-medium" style={{ color: 'rgb(var(--text-primary))' }}>{displayValue}</div>
              {typeof value === 'object' && value && value.weight && (
                <div className="text-sm" style={{ color: 'rgb(var(--text-tertiary))' }}>{value.weight}g ‚Ä¢ {value.speeds || ''}</div>
              )}
            </div>
          ) : (
            <span style={{ color: 'rgb(var(--text-placeholder))' }}>
              {placeholder}
            </span>
          )}
        </div>
        <svg 
          className={`w-5 h-5 transition-transform ${isOpen ? 'rotate-180' : ''}`}
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {/* Dropdown Panel - Now rendered in a Portal */}
      {isOpen &&
        createPortal(
          <div 
            ref={portalRef}
            className="mobile-dropdown-overlay"
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgb(var(--bg-primary))',
            }}
          >
            <div 
              className="dropdown-panel"
              style={{
                width: '100%',
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
              }}
            >
              {/* Header */}
              <div className="dropdown-header" style={{
                padding: '20px',
                borderBottom: '1px solid rgb(var(--border-primary))',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                backgroundColor: 'rgb(var(--bg-secondary))',
                flexShrink: 0
              }}>
                <h3 className="text-lg font-semibold" style={{ color: 'rgb(var(--text-primary))' }}>
                  {placeholder}
                </h3>
                <button
                  onClick={() => setIsOpen(false)}
                  className="btn-secondary p-2"
                  style={{
                    minWidth: 'auto',
                    minHeight: 'auto'
                  }}
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              {/* Search Input */}
              {searchable && (
                <div className="search-container" style={{ 
                  padding: '16px 20px', 
                  flexShrink: 0 
                }}>
                  <input
                    ref={searchInputRef}
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    placeholder="Search components..."
                    className="input-premium"
                    style={{
                      WebkitAppearance: 'none'
                    }}
                  />
                </div>
              )}

              {/* Options List */}
              <div 
                className="options-container"
                style={{
                  flex: 1,
                  overflow: 'auto',
                  WebkitOverflowScrolling: 'touch',
                  padding: '0 20px 20px 20px',
                }}
              >
                {filteredOptions.length > 0 ? (
                  <div className="options-list space-y-2">
                    {filteredOptions.map((option) => {
                      if (!option || !option.id) return null;
                      return (
                        <button
                          key={option.id}
                          onClick={() => handleSelect(option)}
                          className={`option-item ${value === option.value ? "card-premium bg-brand-blue/10 border-brand-blue" : "card-premium"}`}
                          style={{
                            width: '100%',
                            color: 'rgb(var(--text-primary))',
                            textAlign: 'left',
                            minHeight: '60px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'space-between',
                            padding: '16px'
                          }}
                        >
                          <div className="flex-1">
                            <div className="font-medium text-base" style={{ color: 'rgb(var(--text-primary))' }}>{option.label || ''}</div>
                            {option.subtitle && (
                              <div className="text-sm mt-1" style={{ color: 'rgb(var(--text-tertiary))' }}>{option.subtitle}</div>
                            )}
                          </div>
                          {value === option.value && (
                            <svg className="w-5 h-5" style={{ color: 'rgb(var(--brand-blue))' }} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          )}
                        </button>
                      );
                    })}
                  </div>
                ) : (
                  <div className="no-options" style={{
                    textAlign: 'center',
                    padding: '40px 20px',
                    color: 'rgb(var(--text-tertiary))'
                  }}>
                    <svg className="w-12 h-12 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 20.4a7.962 7.962 0 01-5-1.691c-.9-.69-1.628-1.565-2.13-2.548L3 12l1.87-4.161C5.372 6.296 6.6 4.785 8.5 3.734A7.96 7.96 0 0112 3c1.441 0 2.783.302 4.013.834 1.9 1.051 3.128 2.562 3.63 4.105L21 12l-1.357 3.839A7.967 7.967 0 0112 20.4z" />
                    </svg>
                    <p>No options found</p>
                    {searchable && searchTerm && (
                      <p className="text-sm mt-2">Try adjusting your search</p>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>,
          document.body
        )}
    </div>
  );
}


############################################################
# FILE: components/mobile/InstallPrompt.js
# Size: 4.55 KB | Lines: 156
############################################################

// components/mobile/InstallPrompt.js - Mobile-specific install prompt
import { useState, useEffect } from 'react';
import { canInstall, getInstallPrompt, installPWA, checkIfPWA } from '../../lib/pwa-utils';
import { toast } from '../Toast';

export default function MobileInstallPrompt() {
  const [showPrompt, setShowPrompt] = useState(false);
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [isInstalling, setIsInstalling] = useState(false);

  useEffect(() => {
    let timeoutId = null;
    
    const checkInstallability = async () => {
      // Don't show if already installed as PWA
      if (checkIfPWA()) return;
      
      // Don't show if user dismissed recently
      const dismissedTime = localStorage.getItem('cranksmith_mobile_install_dismissed');
      if (dismissedTime && Date.now() - parseInt(dismissedTime) < 12 * 60 * 60 * 1000) { // 12 hours
        return;
      }

      // Check if app can be installed
      if (canInstall()) {
        const prompt = await getInstallPrompt();
        if (prompt) {
          setDeferredPrompt(prompt);
          // Show after user has used the app for a bit
          timeoutId = setTimeout(() => setShowPrompt(true), 10000);
        }
      }
    };

    checkInstallability();

    // Cleanup timeout to prevent memory leaks
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, []);

  const handleInstall = async () => {
    if (!deferredPrompt) return;
    
    setIsInstalling(true);
    try {
      const success = await installPWA(deferredPrompt);
      if (success) {
        setShowPrompt(false);
        // Show success message
        toast.success('üéâ CrankSmith installed! You can now access it from your home screen.');
      }
    } catch (error) {
      console.error('Install failed:', error);
    } finally {
      setIsInstalling(false);
    }
  };

  const handleDismiss = () => {
    setShowPrompt(false);
    // Remember dismissal for 12 hours
    localStorage.setItem('cranksmith_mobile_install_dismissed', Date.now().toString());
  };

  if (!showPrompt) return null;

  return (
    <div className="mobile-install-prompt" style={{
      position: 'fixed',
      bottom: '20px',
      left: '20px',
      right: '20px',
      background: 'linear-gradient(135deg, #3B82F6 0%, #1E40AF 100%)',
      borderRadius: '16px',
      padding: '20px',
      color: 'white',
      zIndex: 1000,
      boxShadow: '0 8px 32px rgba(59, 130, 246, 0.3)',
      border: '1px solid rgba(255, 255, 255, 0.1)'
    }}>
      <div className="flex items-center gap-4 mb-4">
        <div style={{
          width: '48px',
          height: '48px',
          background: 'rgba(255, 255, 255, 0.2)',
          borderRadius: '12px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '24px'
        }}>
          üö¥
        </div>
        <div>
          <h3 className="font-bold text-lg">Install CrankSmith</h3>
          <p className="text-sm opacity-90">Get the full app experience</p>
        </div>
      </div>

      <div className="benefits mb-4 space-y-2">
        <div className="flex items-center gap-2 text-sm">
          <span>‚úì</span>
          <span>Works offline</span>
        </div>
        <div className="flex items-center gap-2 text-sm">
          <span>‚úì</span>
          <span>Home screen access</span>
        </div>
        <div className="flex items-center gap-2 text-sm">
          <span>‚úì</span>
          <span>Faster loading</span>
        </div>
      </div>

      <div className="flex gap-3">
        <button
          onClick={handleInstall}
          disabled={isInstalling}
          style={{
            flex: 1,
            background: 'rgba(255, 255, 255, 0.2)',
            color: 'white',
            border: '1px solid rgba(255, 255, 255, 0.3)',
            borderRadius: '12px',
            padding: '12px 16px',
            fontSize: '14px',
            fontWeight: '600',
            cursor: isInstalling ? 'not-allowed' : 'pointer',
            opacity: isInstalling ? 0.7 : 1
          }}
        >
          {isInstalling ? 'Installing...' : 'Install App'}
        </button>
        
        <button
          onClick={handleDismiss}
          style={{
            background: 'transparent',
            color: 'rgba(255, 255, 255, 0.7)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            borderRadius: '12px',
            padding: '12px 16px',
            fontSize: '14px',
            cursor: 'pointer'
          }}
        >
          Later
        </button>
      </div>
    </div>
  );
} 


############################################################
# FILE: hooks/useCalculatorState.js
# Size: 3.23 KB | Lines: 108
############################################################

import { useState, useCallback, useMemo } from 'react';
import { calculateRealPerformance, validateSetupComplete } from '../lib/calculateRealPerformance';
import { toast } from '../components/Toast';

const initialSetup = {
  wheel: '',
  tire: '',
  crankset: null,
  cassette: null
};

export const useCalculatorState = () => {
  const [bikeType, setBikeType] = useState('');
  const [currentSetup, setCurrentSetup] = useState(initialSetup);
  const [proposedSetup, setProposedSetup] = useState(initialSetup);
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [speedUnit, setSpeedUnit] = useState('mph');
  const [compatibilityResults, setCompatibilityResults] = useState(null);

  // Memoized validation
  const validation = useMemo(() => {
    const currentValidation = validateSetupComplete(currentSetup);
    const proposedValidation = validateSetupComplete(proposedSetup);
    
    const totalCompletion = (currentValidation.completion + proposedValidation.completion) / 2;
    
    return {
      current: currentValidation,
      proposed: proposedValidation,
      canAnalyze: currentValidation.isComplete && proposedValidation.isComplete,
      totalCompletion: isNaN(totalCompletion) ? 0 : totalCompletion
    };
  }, [currentSetup, proposedSetup]);

  // Optimized setup update functions
  const updateCurrentSetup = useCallback((updates) => {
    setCurrentSetup(prev => ({ ...prev, ...updates }));
  }, []);

  const updateProposedSetup = useCallback((updates) => {
    setProposedSetup(prev => ({ ...prev, ...updates }));
  }, []);

  // Reset function
  const resetCalculator = useCallback(() => {
    setBikeType('');
    setCurrentSetup(initialSetup);
    setProposedSetup(initialSetup);
    setResults(null);
    setCompatibilityResults(null);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);

  // Calculate function with race condition prevention
  const calculateResults = useCallback(async () => {
    if (!validation.canAnalyze) {
      toast.warning('Please complete both setups before analyzing');
      return;
    }

    // Prevent concurrent calculations
    if (loading) {
      console.log('Calculation already in progress, skipping...');
      return;
    }

    setLoading(true);
    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const realResults = calculateRealPerformance(currentSetup, proposedSetup, speedUnit);
      setResults(realResults);
      toast.success('Analysis complete! Check your results below.');
      
      return realResults;
    } catch (error) {
      console.error('Error calculating results:', error);
      toast.error('Error calculating results. Please check your component selections and try again.');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [currentSetup, proposedSetup, speedUnit, validation.canAnalyze, loading]);

  return {
    // State
    bikeType,
    currentSetup,
    proposedSetup,
    results,
    loading,
    speedUnit,
    compatibilityResults,
    validation,
    
    // Actions
    setBikeType,
    updateCurrentSetup,
    updateProposedSetup,
    setResults,
    setSpeedUnit,
    setCompatibilityResults,
    resetCalculator,
    calculateResults
  };
}; 


############################################################
# FILE: store/calculatorStore.js
# Size: 5.57 KB | Lines: 179
############################################################

// store/calculatorStore.js - COMPLETE FILE
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';
import { calculateRealPerformance, validateSetupComplete } from '../lib/calculateRealPerformance';
import { toast } from '../components/Toast';

const initialSetup = {
  wheel: '',
  tire: '',
  crankset: null,
  cassette: null
};

const useCalculatorStore = create(
  devtools(
    persist(
      (set, get) => ({
        // State
        bikeType: '',
        currentSetup: initialSetup,
        proposedSetup: initialSetup,
        results: null,
        loading: false,
        speedUnit: 'mph',
        compatibilityResults: null,
        savedConfigs: [],

        // Actions
        setBikeType: (bikeType) => set({ bikeType }),
        
        updateCurrentSetup: (updates) => set((state) => ({
          currentSetup: { ...state.currentSetup, ...updates }
        })),
        
        updateProposedSetup: (updates) => set((state) => ({
          proposedSetup: { ...state.proposedSetup, ...updates }
        })),
        
        setResults: (results) => set({ results }),
        
        setSpeedUnit: (speedUnit) => {
          set({ speedUnit });
          localStorage.setItem('cranksmith_speed_unit', speedUnit);
        },
        
        setCompatibilityResults: (compatibilityResults) => set({ compatibilityResults }),
        
        resetCalculator: () => set({
          bikeType: '',
          currentSetup: initialSetup,
          proposedSetup: initialSetup,
          results: null,
          compatibilityResults: null
        }),

        // Computed values
        get validation() {
          const state = get();
          const currentValidation = validateSetupComplete(state.currentSetup);
          const proposedValidation = validateSetupComplete(state.proposedSetup);
          
          const totalCompletion = (currentValidation.completion + proposedValidation.completion) / 2;
          
          return {
            current: currentValidation,
            proposed: proposedValidation,
            canAnalyze: currentValidation.isComplete && proposedValidation.isComplete,
            totalCompletion: isNaN(totalCompletion) ? 0 : totalCompletion
          };
        },

        // Async actions with race condition prevention
        calculateResults: async () => {
          const state = get();
          const validation = state.validation;
          
          if (!validation.canAnalyze) {
            toast.warning('Please complete both setups before analyzing');
            return null;
          }

          // Prevent concurrent calculations
          if (state.loading) {
            console.log('Calculation already in progress, skipping...');
            return null;
          }

          set({ loading: true });
          
          try {
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const realResults = calculateRealPerformance(
              state.currentSetup, 
              state.proposedSetup, 
              state.speedUnit
            );
            
            set({ results: realResults });
            toast.success('Analysis complete! Check your results below.');
            return realResults;
          } catch (error) {
            console.error('Error calculating results:', error);
            toast.error('Error calculating results. Please check your component selections and try again.');
            throw error;
          } finally {
            set({ loading: false });
          }
        },

        // Saved configurations
        loadSavedConfigs: () => {
          try {
            const saved = localStorage.getItem('cranksmith_configs');
            if (saved) {
              set({ savedConfigs: JSON.parse(saved) });
            }
          } catch (error) {
            console.error('Error loading saved configs:', error);
          }
        },

        saveConfiguration: (config) => {
          const state = get();
          const newConfig = {
            ...config,
            id: Date.now().toString(),
            created_at: new Date().toISOString()
          };
          
          const updatedConfigs = [...state.savedConfigs, newConfig];
          set({ savedConfigs: updatedConfigs });
          
          try {
            localStorage.setItem('cranksmith_configs', JSON.stringify(updatedConfigs));
            return { success: true };
          } catch (error) {
            console.error('Error saving config:', error);
            return { success: false, error: error.message };
          }
        },

        deleteConfiguration: (id) => {
          const state = get();
          const updatedConfigs = state.savedConfigs.filter(config => config.id !== id);
          set({ savedConfigs: updatedConfigs });
          
          try {
            localStorage.setItem('cranksmith_configs', JSON.stringify(updatedConfigs));
            return { success: true };
          } catch (error) {
            console.error('Error deleting config:', error);
            return { success: false, error: error.message };
          }
        },

        loadConfiguration: (config) => {
          set({
            bikeType: config.bikeType,
            currentSetup: config.currentSetup,
            proposedSetup: config.proposedSetup,
            results: config.results,
            compatibilityResults: config.compatibilityResults
          });
        }
      }),
      {
        name: 'cranksmith-calculator',
        partialize: (state) => ({
          speedUnit: state.speedUnit,
          savedConfigs: state.savedConfigs
        })
      }
    )
  )
);

export default useCalculatorStore;



############################################################
# FILE: lib/pwa-enhanced.ts
# Size: 8.33 KB | Lines: 310
############################################################

// lib/pwa-enhanced.ts - Enhanced PWA utilities with offline support and background sync
import { ServiceWorkerMessage } from '../types';

let swRegistration: ServiceWorkerRegistration | null = null;
let installPromptEvent: any = null;

// Enhanced service worker registration
export async function registerEnhancedServiceWorker(): Promise<void> {
  if (typeof window === 'undefined' || !('serviceWorker' in navigator)) {
    console.log('Service Worker not supported');
    return;
  }

  try {
    // Unregister old service worker first
    const registrations = await navigator.serviceWorker.getRegistrations();
    for (const registration of registrations) {
      if (registration.scope.includes('sw.js')) {
        await registration.unregister();
        console.log('Unregistered old service worker');
      }
    }

    // Register enhanced service worker
    swRegistration = await navigator.serviceWorker.register('/sw-enhanced.js', {
      scope: '/',
      updateViaCache: 'none'
    });

    console.log('Enhanced Service Worker registered successfully');

    // Handle service worker updates
    swRegistration.addEventListener('updatefound', () => {
      const newWorker = swRegistration?.installing;
      if (newWorker) {
        newWorker.addEventListener('statechange', () => {
          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
            // New version available
            showUpdatePrompt();
          }
        });
      }
    });

    // Listen for messages from service worker
    navigator.serviceWorker.addEventListener('message', handleServiceWorkerMessage);

    // Cache component data for offline use
    await cacheComponentData();

  } catch (error) {
    console.error('Enhanced Service Worker registration failed:', error);
  }
}

// Handle messages from service worker
function handleServiceWorkerMessage(event: MessageEvent<ServiceWorkerMessage>): void {
  const { type, payload } = event.data;

  switch (type) {
    case 'CACHE_UPDATED':
      console.log('Cache updated:', payload);
      break;
    case 'OFFLINE_READY':
      showOfflineReadyNotification();
      break;
    case 'UPDATE_AVAILABLE':
      showUpdatePrompt();
      break;
  }
}

// Cache component data for offline calculations
export async function cacheComponentData(): Promise<void> {
  if (!swRegistration) return;

  try {
    // Import component data
    const { componentDatabase } = await import('./components');
    
    // Send to service worker for caching
    if (swRegistration.active) {
      swRegistration.active.postMessage({
        type: 'CACHE_COMPONENT_DATA',
        payload: componentDatabase
      });
    }

    console.log('Component data sent to service worker for caching');
  } catch (error) {
    console.error('Failed to cache component data:', error);
  }
}

// Enhanced PWA install functionality
export function initializeEnhancedPWA(): void {
  // Listen for install prompt
  window.addEventListener('beforeinstallprompt', (e) => {
    e.preventDefault();
    installPromptEvent = e;
    console.log('PWA install prompt captured');
  });

  // Handle app installed
  window.addEventListener('appinstalled', () => {
    console.log('PWA installed successfully');
    installPromptEvent = null;
    
    // Track installation
    if (typeof (window as any).gtag !== 'undefined') {
      (window as any).gtag('event', 'pwa_install', {
        event_category: 'engagement',
        event_label: 'PWA Installation'
      });
    }
  });

  // Register service worker
  registerEnhancedServiceWorker();
}

// Enhanced install PWA function
export async function installEnhancedPWA(): Promise<boolean> {
  if (!installPromptEvent) {
    console.log('No install prompt available');
    return false;
  }

  try {
    const result = await installPromptEvent.prompt();
    const userChoice = await result.userChoice;
    
    if (userChoice === 'accepted') {
      console.log('User accepted PWA install');
      return true;
    } else {
      console.log('User dismissed PWA install');
      return false;
    }
  } catch (error) {
    console.error('PWA install failed:', error);
    return false;
  } finally {
    installPromptEvent = null;
  }
}

// Check if PWA install is available
export function canInstallEnhancedPWA(): boolean {
  return !!installPromptEvent;
}

// Offline configuration management
export async function saveConfigurationOffline(config: any): Promise<void> {
  if (!swRegistration?.active) {
    console.warn('Service worker not available for offline save');
    return;
  }

  try {
    swRegistration.active.postMessage({
      type: 'SAVE_OFFLINE_CONFIG',
      payload: config
    });

    console.log('Configuration saved for offline sync');
  } catch (error) {
    console.error('Failed to save configuration offline:', error);
  }
}

// Get cache status
export async function getCacheStatus(): Promise<any> {
  return new Promise((resolve) => {
    if (!swRegistration?.active) {
      resolve({ hasOfflineData: false, hasPendingSync: false });
      return;
    }

    const messageChannel = new MessageChannel();
    messageChannel.port1.onmessage = (event) => {
      if (event.data.type === 'CACHE_STATUS') {
        resolve(event.data.payload);
      }
    };

    swRegistration.active.postMessage(
      { type: 'REQUEST_CACHE_STATUS' },
      [messageChannel.port2]
    );

    // Timeout after 5 seconds
    setTimeout(() => {
      resolve({ hasOfflineData: false, hasPendingSync: false });
    }, 5000);
  });
}

// Connection status management
export class ConnectionManager {
  private static instance: ConnectionManager;
  private isOnline: boolean = navigator.onLine;
  private listeners: Set<(online: boolean) => void> = new Set();

  private constructor() {
    window.addEventListener('online', this.handleOnline.bind(this));
    window.addEventListener('offline', this.handleOffline.bind(this));
  }

  static getInstance(): ConnectionManager {
    if (!ConnectionManager.instance) {
      ConnectionManager.instance = new ConnectionManager();
    }
    return ConnectionManager.instance;
  }

  private handleOnline(): void {
    this.isOnline = true;
    this.notifyListeners();
    console.log('Connection restored');
  }

  private handleOffline(): void {
    this.isOnline = false;
    this.notifyListeners();
    console.log('Connection lost');
  }

  private notifyListeners(): void {
    this.listeners.forEach(listener => listener(this.isOnline));
  }

  public addListener(listener: (online: boolean) => void): void {
    this.listeners.add(listener);
  }

  public removeListener(listener: (online: boolean) => void): void {
    this.listeners.delete(listener);
  }

  public get online(): boolean {
    return this.isOnline;
  }
}

// Enhanced notifications
function showOfflineReadyNotification(): void {
  if ('toast' in window) {
    (window as any).toast.success('App is ready to work offline!', 3000);
  }
}

function showUpdatePrompt(): void {
  if ('toast' in window) {
    (window as any).toast.info('A new version is available. Refresh to update.', 8000);
  }
}

// Network-aware fetch wrapper
export async function networkAwareFetch(
  url: string, 
  options: RequestInit = {}
): Promise<Response> {
  try {
    const response = await fetch(url, {
      ...options,
      cache: 'no-cache'
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    return response;
  } catch (error) {
    console.warn('Network request failed, checking cache:', url);
    
    // Try to get cached version if available
    if ('caches' in window) {
      const cache = await caches.open('cranksmith-components-v2.0.0');
      const cached = await cache.match(url);
      
      if (cached) {
        console.log('Returning cached response for:', url);
        return cached;
      }
    }

    throw error;
  }
}

// Offline-first calculation wrapper
export async function offlineCalculateResults(
  currentSetup: any,
  proposedSetup: any,
  speedUnit: string
): Promise<any> {
  try {
    // Try to import calculation function directly
    const { calculateRealPerformance } = await import('./calculateRealPerformance');
    return calculateRealPerformance(currentSetup, proposedSetup, speedUnit);
  } catch (error) {
    console.error('Offline calculation failed:', error);
    throw new Error('Calculation temporarily unavailable');
  }
}

// Export singleton connection manager instance
export const connectionManager = ConnectionManager.getInstance();


############################################################
# FILE: types/index.ts
# Size: 5.09 KB | Lines: 235
############################################################

// types/index.ts - COMPLETE FILE
export interface WheelSize {
  id: string;
  label: string;
  iso: number;
}

export interface BikeType {
  id: 'road' | 'gravel' | 'mtb';
  name: string;
  description: string;
  wheelSizes: string[];
  tireWidths: number[];
  defaultSetup: BikeSetup;
}

export interface Component {
  id: string;
  model: string;
  variant: string;
  weight: number;
  bikeType: string;
  speeds: string;
}

export interface Crankset extends Component {
  teeth: number[];
}

export interface Cassette extends Component {
  teeth: number[];
}

export interface BikeSetup {
  wheel: string;
  tire: string;
  crankset: Crankset | null;
  cassette: Cassette | null;
}

export interface GearMetrics {
  highSpeed: string;
  lowSpeed: string;
  highRatio: string;
  lowRatio: string;
}

export interface SetupAnalysis {
  metrics: GearMetrics;
  totalWeight: number;
  gearRange: string;
  setup: BikeSetup;
}

export interface ComparisonResults {
  speedChange: number;
  weightChange: number;
  rangeChange: number;
  speedUnit: string;
}

export interface AnalysisResults {
  current: SetupAnalysis;
  proposed: SetupAnalysis;
  comparison: ComparisonResults;
  compatibility?: CompatibilitySummary;
}

export interface CompatibilityCheck {
  derailleurCapacity: boolean;
  chainLength: boolean;
  speedCompatibility: boolean;
  chainLine: boolean;
}

export interface CompatibilitySummary {
  status: 'compatible' | 'warning' | 'error' | 'incomplete';
  title: string;
  message: string;
  criticalIssues: string[];
  minorWarnings: string[];
  actionItems: string[];
}

export interface ValidationResult {
  isComplete: boolean;
  missing: string[];
  completion: number;
}

export interface SavedConfiguration {
  id: string | number;
  name: string;
  bikeType: string;
  currentSetup: BikeSetup;
  proposedSetup: BikeSetup;
  results: AnalysisResults;
  compatibilityResults?: CompatibilitySummary;
  created_at: string;
}

export interface RileyMessage {
  type: 'user' | 'riley';
  content: string;
  timestamp: string;
}

export interface ToastState {
  show: boolean;
  message: string;
  type?: 'success' | 'error' | 'warning';
}

// Enhanced Toast System Types
export type ToastType = 'success' | 'error' | 'warning' | 'info';

export interface Toast {
  id: number;
  type: ToastType;
  message: string;
  duration: number;
}

export interface ToastAPI {
  success: (message: string, duration?: number) => void;
  error: (message: string, duration?: number) => void;
  warning: (message: string, duration?: number) => void;
  info: (message: string, duration?: number) => void;
}

// Searchable Dropdown Types
export interface DropdownOption {
  id: string;
  label: string;
  model?: string;
  variant?: string;
  teeth?: number[];
  speeds?: string;
  weight?: number;
  bikeType?: string;
  subtitle?: string;
  value?: any;
}

export interface GroupedOptions {
  [groupName: string]: DropdownOption[];
}

// Enhanced Calculator State Types
export interface CalculatorState {
  bikeType: string;
  currentSetup: BikeSetup;
  proposedSetup: BikeSetup;
  results: AnalysisResults | null;
  loading: boolean;
  speedUnit: 'mph' | 'kmh';
  compatibilityResults: CompatibilitySummary | null;
  validation: {
    current: ValidationResult;
    proposed: ValidationResult;
    canAnalyze: boolean;
    totalCompletion: number;
  };
}

// PWA Types
export interface PWAInstallPrompt {
  prompt: () => Promise<void>;
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
}

export interface ServiceWorkerMessage {
  type: 'CACHE_UPDATED' | 'OFFLINE_READY' | 'UPDATE_AVAILABLE';
  payload?: any;
}

// API Response Types
export interface APIResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  timestamp: string;
}

export interface RileyAPIResponse extends APIResponse {
  response?: string;
}

// Bike Fit Calculator Types
export type FlexibilityLevel = 'low' | 'average' | 'high';
export type RidingStyle = 'comfort' | 'endurance' | 'sport' | 'aggressive' | 'racing';
export type ExperienceLevel = 'beginner' | 'intermediate' | 'advanced' | 'professional';
export type MeasurementUnits = 'metric' | 'imperial';

export interface BodyMeasurements {
  inseam: string;
  torso: string;
  armLength: string;
  flexibility: FlexibilityLevel;
  ridingStyle: RidingStyle;
  experience: ExperienceLevel;
  units: MeasurementUnits;
}

export interface SaddleHeightResults {
  lemond: number;
  holmes: number;
  hamley: number;
  competitive: number;
}

export interface HandlebarDropOptions {
  comfort: number;
  sport: number;
  aggressive: number;
}

export interface BikeFitResults {
  saddleHeight: SaddleHeightResults;
  reach: number;
  stack: number;
  handlebarDrop: HandlebarDropOptions;
}

export interface BikeFitCalculations {
  saddleHeight: {
    lemond: (inseam: number) => number;
    holmes: (inseam: number) => number;
    hamley: (inseam: number) => number;
    competitive: (inseam: number) => number;
  };
  reach: (torso: number, armLength: number, flexibility: FlexibilityLevel, ridingStyle: RidingStyle) => number;
  stack: (torso: number, flexibility: FlexibilityLevel, ridingStyle: RidingStyle, experience: ExperienceLevel) => number;
}



############################################################
# FILE: package.json
# Size: 0.94 KB | Lines: 41
############################################################

{
  "name": "cranksmith-v2",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@supabase/supabase-js": "^2.50.0",
    "@upstash/redis": "^1.35.1",
    "autoprefixer": "^10.4.17",
    "chart.js": "^4.5.0",
    "jspdf": "^3.0.1",
    "next": "^15.3.3",
    "nodemailer": "^7.0.3",
    "postcss": "^8.4.35",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-window": "^1.8.11",
    "recharts": "^2.15.3",
    "tailwindcss": "^3.4.1"
  },
  "devDependencies": {
    "@types/node": "^20.10.0",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "@types/react-window": "^1.8.8",
    "@types/nodemailer": "^6.4.14",
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.1.0",
    "typescript": "^5.3.3"
  }
}



############################################################
# FILE: next.config.js
# Size: 0.38 KB | Lines: 17
############################################################

/** @type {import('next').NextConfig} */
const nextConfig = {
  // Remove the swcMinify line if it's there
  webpack: (config, { isServer }) => {
    if (isServer) {
      // Exclude service worker from server-side bundling
      config.resolve.alias = {
        ...config.resolve.alias,
        'sw.js': false,
      };
    }
    return config;
  },
};

module.exports = nextConfig;



############################################################
# FILE: tailwind.config.js
# Size: 3.32 KB | Lines: 97
############################################################

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  darkMode: ['class', '[data-theme="dark"]'],
  theme: {
    extend: {
      colors: {
        brand: {
          orange: 'rgb(var(--brand-orange) / <alpha-value>)',
          yellow: 'rgb(var(--brand-yellow) / <alpha-value>)',
          blue: 'rgb(var(--brand-blue) / <alpha-value>)',
          purple: 'rgb(var(--brand-purple) / <alpha-value>)',
          green: 'rgb(var(--brand-green) / <alpha-value>)',
          red: 'rgb(var(--brand-red) / <alpha-value>)',
        },
        neutral: {
          50: 'rgb(var(--neutral-50) / <alpha-value>)',
          100: 'rgb(var(--neutral-100) / <alpha-value>)',
          200: 'rgb(var(--neutral-200) / <alpha-value>)',
          300: 'rgb(var(--neutral-300) / <alpha-value>)',
          400: 'rgb(var(--neutral-400) / <alpha-value>)',
          500: 'rgb(var(--neutral-500) / <alpha-value>)',
          600: 'rgb(var(--neutral-600) / <alpha-value>)',
          700: 'rgb(var(--neutral-700) / <alpha-value>)',
          800: 'rgb(var(--neutral-800) / <alpha-value>)',
          900: 'rgb(var(--neutral-900) / <alpha-value>)',
          950: 'rgb(var(--neutral-950) / <alpha-value>)',
        },
      },
      fontFamily: {
        sans: ['-apple-system', 'BlinkMacSystemFont', '"SF Pro Display"', '"Segoe UI"', 'Roboto', 'Helvetica', 'Arial', 'sans-serif'],
        mono: ['"SF Mono"', 'Monaco', 'Consolas', '"Liberation Mono"', '"Courier New"', 'monospace'],
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '120': '30rem',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'spin-slow': 'spin 3s linear infinite',
        'pulse-slow': 'pulse 3s ease-in-out infinite',
        'bounce-slow': 'bounce 2s infinite',
      },
      borderRadius: {
        '4xl': '2rem',
      },
      boxShadow: {
        'glow-sm': '0 0 10px rgb(var(--brand-blue) / 0.3)',
        'glow-md': '0 0 20px rgb(var(--brand-blue) / 0.4)',
        'glow-lg': '0 0 40px rgb(var(--brand-blue) / 0.5)',
        'inner-lg': 'inset 0 2px 4px 0 rgb(0 0 0 / 0.1)',
      },
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
        'gradient-performance': 'var(--gradient-performance)',
        'gradient-premium': 'var(--gradient-premium)',
        'gradient-success': 'var(--gradient-success)',
      },
      transitionTimingFunction: {
        'out-expo': 'cubic-bezier(0.16, 1, 0.3, 1)',
      },
    },
  },
  plugins: [
    function({ addUtilities }) {
      const newUtilities = {
        '.text-balance': {
          'text-wrap': 'balance',
        },
        '.animation-delay-100': {
          'animation-delay': '100ms',
        },
        '.animation-delay-200': {
          'animation-delay': '200ms',
        },
        '.animation-delay-300': {
          'animation-delay': '300ms',
        },
        '.animation-delay-500': {
          'animation-delay': '500ms',
        },
        '.animation-delay-1000': {
          'animation-delay': '1000ms',
        },
      }
      addUtilities(newUtilities)
    },
  ],
}



############################################################
# FILE: tsconfig.json
# Size: 0.86 KB | Lines: 44
############################################################

{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    },
    "strictNullChecks": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    ".next",
    "out"
  ]
}


############################################################
# FILE: public/sw-enhanced.js
# Size: 10.15 KB | Lines: 348
############################################################

// public/sw-enhanced.js - Advanced Service Worker for PWA with offline capabilities
const CACHE_VERSION = '2.0.0';
const STATIC_CACHE_NAME = `cranksmith-static-v${CACHE_VERSION}`;
const DYNAMIC_CACHE_NAME = `cranksmith-dynamic-v${CACHE_VERSION}`;
const COMPONENTS_CACHE_NAME = `cranksmith-components-v${CACHE_VERSION}`;
const CALCULATIONS_CACHE_NAME = `cranksmith-calculations-v${CACHE_VERSION}`;

// Critical files for offline functionality
const STATIC_ASSETS = [
  '/',
  '/mobile',
  '/calculator',
  '/manifest.json',
  '/icon-192.png',
  '/icon-512.png',
  '/offline.html' // We'll create this
];

// Component data endpoints to cache
const COMPONENT_ENDPOINTS = [
  '/api/components-data',
  '/lib/components.js'
];

// Install event - cache critical assets
self.addEventListener('install', (event) => {
  console.log('Enhanced SW: Installing...');
  
  event.waitUntil(
    Promise.all([
      caches.open(STATIC_CACHE_NAME).then(cache => {
        console.log('Enhanced SW: Caching static assets');
        return cache.addAll(STATIC_ASSETS.filter(asset => 
          !asset.includes('offline.html') // Skip if doesn't exist yet
        ));
      }),
      caches.open(COMPONENTS_CACHE_NAME).then(cache => {
        console.log('Enhanced SW: Pre-caching component data');
        // Pre-cache component database for offline calculations
        return cache.add('/lib/components.js');
      })
    ]).catch(error => {
      console.warn('Enhanced SW: Failed to cache some assets', error);
      return Promise.resolve();
    })
  );
  
  self.skipWaiting();
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('Enhanced SW: Activating...');
  
  event.waitUntil(
    Promise.all([
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            if (cacheName.includes('cranksmith') && 
                !cacheName.includes(CACHE_VERSION)) {
              console.log('Enhanced SW: Deleting old cache', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      }),
      self.clients.claim()
    ])
  );
});

// Fetch event - intelligent caching strategy
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Handle different types of requests
  if (request.method === 'GET') {
    if (url.pathname.includes('/api/riley')) {
      // Riley API - cache successful responses
      event.respondWith(rileyAPIStrategy(request));
    } else if (url.pathname.includes('/api/') || url.pathname.includes('/lib/components')) {
      // API requests - cache with network first strategy
      event.respondWith(networkFirstStrategy(request, COMPONENTS_CACHE_NAME));
    } else if (STATIC_ASSETS.some(asset => url.pathname.includes(asset))) {
      // Static assets - cache first strategy
      event.respondWith(cacheFirstStrategy(request, STATIC_CACHE_NAME));
    } else if (url.pathname.includes('/_next/')) {
      // Next.js assets - cache first with long TTL
      event.respondWith(cacheFirstStrategy(request, DYNAMIC_CACHE_NAME));
    } else {
      // Other requests - network first with fallback
      event.respondWith(networkFirstWithFallback(request));
    }
  }
});

// Cache-first strategy for static assets
async function cacheFirstStrategy(request, cacheName) {
  try {
    const cache = await caches.open(cacheName);
    const cached = await cache.match(request);
    
    if (cached) {
      // Return cached version and update in background
      fetchAndCache(request, cacheName);
      return cached;
    }
    
    return await fetchAndCache(request, cacheName);
  } catch (error) {
    console.error('Cache-first strategy failed:', error);
    return new Response('Offline', { status: 503 });
  }
}

// Network-first strategy for dynamic content
async function networkFirstStrategy(request, cacheName) {
  try {
    const response = await fetch(request);
    
    if (response.ok) {
      const cache = await caches.open(cacheName);
      cache.put(request, response.clone());
    }
    
    return response;
  } catch (error) {
    console.log('Network failed, checking cache:', request.url);
    const cache = await caches.open(cacheName);
    const cached = await cache.match(request);
    
    if (cached) {
      return cached;
    }
    
    // Return offline response for failed API calls
    return new Response(JSON.stringify({
      success: false,
      error: 'This feature requires an internet connection',
      offline: true
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// Network-first with offline page fallback
async function networkFirstWithFallback(request) {
  try {
    const response = await fetch(request);
    
    if (response.ok) {
      const cache = await caches.open(DYNAMIC_CACHE_NAME);
      cache.put(request, response.clone());
    }
    
    return response;
  } catch (error) {
    const cache = await caches.open(DYNAMIC_CACHE_NAME);
    const cached = await cache.match(request);
    
    if (cached) {
      return cached;
    }
    
    // Return offline page for navigation requests
    if (request.mode === 'navigate') {
      const offlineCache = await caches.open(STATIC_CACHE_NAME);
      const offlinePage = await offlineCache.match('/offline.html');
      return offlinePage || new Response('Offline', { status: 503 });
    }
    
    return new Response('Offline', { status: 503 });
  }
}

// Special handling for Riley AI with offline fallback
async function rileyAPIStrategy(request) {
  try {
    const response = await fetch(request);
    
    if (response.ok) {
      // Cache successful Riley responses
      const cache = await caches.open(CALCULATIONS_CACHE_NAME);
      cache.put(request, response.clone());
    }
    
    return response;
  } catch (error) {
    // Return offline Riley response
    return new Response(JSON.stringify({
      success: false,
      response: "I'm currently offline, but you can still use the gear calculator! The component database and calculations work without an internet connection.",
      offline: true,
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// Helper function to fetch and cache
async function fetchAndCache(request, cacheName) {
  const response = await fetch(request);
  
  if (response.ok) {
    const cache = await caches.open(cacheName);
    cache.put(request, response.clone());
  }
  
  return response;
}

// Background sync for saved configurations
self.addEventListener('sync', (event) => {
  console.log('Enhanced SW: Background sync triggered', event.tag);
  
  if (event.tag === 'sync-saved-configs') {
    event.waitUntil(syncSavedConfigurations());
  }
});

// Sync saved configurations when back online
async function syncSavedConfigurations() {
  try {
    const cache = await caches.open(CALCULATIONS_CACHE_NAME);
    const pendingConfigs = await cache.match('/pending-sync-configs');
    
    if (pendingConfigs) {
      const configs = await pendingConfigs.json();
      
      // Attempt to sync each configuration
      for (const config of configs) {
        try {
          await fetch('/api/save-config', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(config)
          });
        } catch (error) {
          console.warn('Failed to sync config:', config.id);
        }
      }
      
      // Clear pending sync cache
      await cache.delete('/pending-sync-configs');
      
      // Notify all clients
      const clients = await self.clients.matchAll();
      clients.forEach(client => {
        client.postMessage({
          type: 'SYNC_COMPLETE',
          payload: { configCount: configs.length }
        });
      });
    }
  } catch (error) {
    console.error('Background sync failed:', error);
  }
}

// Message handling for communication with main thread
self.addEventListener('message', (event) => {
  const { type, payload } = event.data;
  
  switch (type) {
    case 'CACHE_COMPONENT_DATA':
      cacheComponentData(payload);
      break;
    case 'SAVE_OFFLINE_CONFIG':
      saveOfflineConfiguration(payload);
      break;
    case 'REQUEST_CACHE_STATUS':
      sendCacheStatus(event.source);
      break;
  }
});

// Cache component data for offline use
async function cacheComponentData(data) {
  try {
    const cache = await caches.open(COMPONENTS_CACHE_NAME);
    await cache.put('/cached-components', new Response(JSON.stringify(data)));
    console.log('Enhanced SW: Component data cached for offline use');
  } catch (error) {
    console.error('Failed to cache component data:', error);
  }
}

// Save configuration for background sync
async function saveOfflineConfiguration(config) {
  try {
    const cache = await caches.open(CALCULATIONS_CACHE_NAME);
    const existing = await cache.match('/pending-sync-configs');
    
    let configs = [];
    if (existing) {
      configs = await existing.json();
    }
    
    configs.push({
      ...config,
      id: Date.now(),
      timestamp: new Date().toISOString()
    });
    
    await cache.put('/pending-sync-configs', new Response(JSON.stringify(configs)));
    
    // Register for background sync
    await self.registration.sync.register('sync-saved-configs');
    
    console.log('Enhanced SW: Configuration saved for sync');
  } catch (error) {
    console.error('Failed to save offline configuration:', error);
  }
}

// Send cache status to client
async function sendCacheStatus(client) {
  try {
    const cacheNames = await caches.keys();
    const status = {
      hasOfflineData: cacheNames.some(name => name.includes('components')),
      hasPendingSync: false,
      cacheSize: cacheNames.length
    };
    
    // Check for pending sync data
    const cache = await caches.open(CALCULATIONS_CACHE_NAME);
    const pending = await cache.match('/pending-sync-configs');
    if (pending) {
      const configs = await pending.json();
      status.hasPendingSync = configs.length > 0;
      status.pendingCount = configs.length;
    }
    
    client.postMessage({
      type: 'CACHE_STATUS',
      payload: status
    });
  } catch (error) {
    console.error('Failed to get cache status:', error);
  }
}


############################################################
# FILE: public/offline.html
# Size: 5.39 KB | Lines: 242
############################################################

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CrankSmith - Offline</title>
  <style>
    :root {
      --primary-blue: #2563eb;
      --surface: #ffffff;
      --surface-dark: #1f2937;
      --text-primary: #111827;
      --text-primary-dark: #f9fafb;
      --text-secondary: #6b7280;
      --border: #e5e7eb;
    }

    @media (prefers-color-scheme: dark) {
      :root {
        --surface: #1f2937;
        --text-primary: #f9fafb;
        --text-secondary: #d1d5db;
        --border: #374151;
      }
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: var(--surface);
      color: var(--text-primary);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .offline-container {
      text-align: center;
      max-width: 500px;
      width: 100%;
    }

    .offline-icon {
      font-size: 4rem;
      margin-bottom: 1.5rem;
      opacity: 0.7;
    }

    h1 {
      font-size: 2rem;
      margin-bottom: 1rem;
      color: var(--primary-blue);
    }

    .subtitle {
      font-size: 1.1rem;
      color: var(--text-secondary);
      margin-bottom: 2rem;
      line-height: 1.6;
    }

    .features {
      background: rgba(37, 99, 235, 0.05);
      border: 1px solid var(--border);
      border-radius: 12px;
      padding: 1.5rem;
      margin: 2rem 0;
      text-align: left;
    }

    .features h3 {
      margin-bottom: 1rem;
      color: var(--primary-blue);
    }

    .features ul {
      list-style: none;
      space-y: 0.5rem;
    }

    .features li {
      padding: 0.5rem 0;
      display: flex;
      align-items: center;
      color: var(--text-secondary);
    }

    .features li::before {
      content: "‚úì";
      color: #10b981;
      font-weight: bold;
      margin-right: 0.75rem;
    }

    .actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-top: 2rem;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border: 2px solid var(--primary-blue);
      border-radius: 8px;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
      cursor: pointer;
    }

    .btn-primary {
      background: var(--primary-blue);
      color: white;
    }

    .btn-primary:hover {
      background: #1d4ed8;
      transform: translateY(-2px);
    }

    .btn-secondary {
      background: transparent;
      color: var(--primary-blue);
    }

    .btn-secondary:hover {
      background: var(--primary-blue);
      color: white;
    }

    .status {
      margin-top: 2rem;
      padding: 1rem;
      border-radius: 8px;
      background: rgba(251, 191, 36, 0.1);
      border: 1px solid #f59e0b;
      color: #92400e;
    }

    .online .status {
      background: rgba(16, 185, 129, 0.1);
      border-color: #10b981;
      color: #065f46;
    }

    @media (max-width: 640px) {
      h1 {
        font-size: 1.5rem;
      }
      
      .subtitle {
        font-size: 1rem;
      }
      
      .actions {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <div class="offline-container">
    <div class="offline-icon">üîß</div>
    
    <h1>You're Offline</h1>
    
    <p class="subtitle">
      No internet connection, but don't worry! CrankSmith works great offline too.
    </p>

    <div class="features">
      <h3>Available Offline:</h3>
      <ul>
        <li>Full gear calculator functionality</li>
        <li>Complete component database</li>
        <li>Gear ratio calculations</li>
        <li>Compatibility checking</li>
        <li>Save configurations locally</li>
      </ul>
    </div>

    <div class="actions">
      <a href="/calculator" class="btn btn-primary">
        Use Calculator Offline
      </a>
      <a href="/mobile" class="btn btn-secondary">
        Mobile Experience
      </a>
    </div>

    <div class="status" id="connectionStatus">
      You're currently offline. Your data will sync when you're back online.
    </div>
  </div>

  <script>
    // Monitor connection status
    function updateConnectionStatus() {
      const status = document.getElementById('connectionStatus');
      const container = document.querySelector('.offline-container');
      
      if (navigator.onLine) {
        status.textContent = "You're back online! Data will sync automatically.";
        container.classList.add('online');
        
        // Auto-redirect after a moment when back online
        setTimeout(() => {
          window.location.href = '/calculator';
        }, 2000);
      } else {
        status.textContent = "You're currently offline. Your data will sync when you're back online.";
        container.classList.remove('online');
      }
    }

    // Check connection status on load and when it changes
    updateConnectionStatus();
    window.addEventListener('online', updateConnectionStatus);
    window.addEventListener('offline', updateConnectionStatus);

    // Service worker messaging
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.addEventListener('message', (event) => {
        const { type, payload } = event.data;
        
        if (type === 'CACHE_STATUS') {
          console.log('Cache status:', payload);
        }
      });
    }
  </script>
</body>
</html>


############################################################
# FILE: components/ThemeToggle.js
# Size: 1.95 KB | Lines: 48
############################################################

import React from 'react';

export default function ThemeToggle({ theme, toggleTheme }) {
  return (
    <button
      onClick={toggleTheme}
      className="relative p-2 rounded-xl bg-neutral-100 dark:bg-neutral-800 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-all duration-200 group"
      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
    >
      <div className="relative w-6 h-6">
        {/* Sun Icon */}
        <svg
          className={`absolute inset-0 w-6 h-6 transition-all duration-300 ${
            theme === 'light' 
              ? 'opacity-100 rotate-0 scale-100' 
              : 'opacity-0 rotate-180 scale-50'
          }`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <circle cx="12" cy="12" r="4" />
          <path d="M12 1v2m0 18v2M4.22 4.22l1.42 1.42m12.72 12.72l1.42 1.42M1 12h2m18 0h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" />
        </svg>
        
        {/* Moon Icon */}
        <svg
          className={`absolute inset-0 w-6 h-6 transition-all duration-300 ${
            theme === 'dark' 
              ? 'opacity-100 rotate-0 scale-100' 
              : 'opacity-0 -rotate-180 scale-50'
          }`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
        </svg>
      </div>
      
      {/* Tooltip */}
      <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-neutral-900 dark:bg-neutral-100 text-white dark:text-neutral-900 text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap">
        {theme === 'light' ? 'Dark mode' : 'Light mode'}
        <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-neutral-900 dark:border-t-neutral-100" />
      </div>
    </button>
  );
} 


############################################################
# FILE: styles/globals.css
# Size: 16.63 KB | Lines: 609
############################################################

@tailwind base;
@tailwind components;
@tailwind utilities;

/* 
==========================================================================
  CRANKSMITH V2 - PREMIUM DESIGN SYSTEM
  Precision-engineered CSS for serious cyclists
==========================================================================
*/

@layer base {
:root {
    /* --- Core Colors --- */
    --white: 255 255 255;
    --black: 0 0 0;
    
    /* --- Neutral Palette (RGB values for opacity support) --- */
    --neutral-50: 250 250 250;
    --neutral-100: 245 245 245;
    --neutral-200: 229 229 229;
    --neutral-300: 212 212 212;
    --neutral-400: 163 163 163;
    --neutral-500: 115 115 115;
    --neutral-600: 82 82 82;
    --neutral-700: 64 64 64;
    --neutral-800: 38 38 38;
    --neutral-900: 23 23 23;
    --neutral-950: 10 10 10;

    /* --- Brand Colors --- */
    --brand-orange: 255 107 53;  /* #FF6B35 - Energy */
    --brand-yellow: 247 147 30;  /* #F7931E - Warning */
    --brand-blue: 0 122 255;     /* #007AFF - Primary */
    --brand-purple: 88 86 214;   /* #5856D6 - Premium */
    --brand-green: 52 199 89;    /* #34C759 - Success */
    --brand-red: 255 59 48;      /* #FF3B30 - Error */

    /* --- Semantic Colors (Light Mode) --- */
    --bg-primary: var(--white);
    --bg-secondary: var(--neutral-50);
    --bg-tertiary: var(--neutral-100);
    --bg-elevated: var(--white);
    --bg-inverse: var(--neutral-950);
    
    --text-primary: var(--neutral-900);
    --text-secondary: var(--neutral-700);     /* Improved from 600 for better contrast */
    --text-tertiary: var(--neutral-600);     /* Improved from 500 for better contrast */
    --text-placeholder: var(--neutral-500);  /* Dedicated placeholder color */
    --text-disabled: var(--neutral-400);     /* Dedicated disabled text color */
    --text-inverse: var(--white);
    
    --border-primary: var(--neutral-200);
    --border-secondary: var(--neutral-300);
    --border-focus: var(--brand-blue);
    
    /* --- Gradients --- */
    --gradient-performance: linear-gradient(135deg, rgb(var(--brand-orange)) 0%, rgb(var(--brand-yellow)) 100%);
    --gradient-premium: linear-gradient(135deg, rgb(var(--brand-blue)) 0%, rgb(var(--brand-purple)) 100%);
    --gradient-success: linear-gradient(135deg, rgb(var(--brand-green)) 0%, rgb(52 199 89 / 0.8) 100%);
    
    /* --- Shadows --- */
    --shadow-xs: 0 1px 2px rgb(0 0 0 / 0.05);
    --shadow-sm: 0 2px 4px rgb(0 0 0 / 0.06);
    --shadow-md: 0 4px 12px rgb(0 0 0 / 0.08);
    --shadow-lg: 0 8px 24px rgb(0 0 0 / 0.12);
    --shadow-xl: 0 16px 48px rgb(0 0 0 / 0.16);
    
    /* --- Spacing Scale --- */
    --space-xs: 0.5rem;   /* 8px */
    --space-sm: 0.75rem;  /* 12px */
    --space-md: 1rem;     /* 16px */
    --space-lg: 1.5rem;   /* 24px */
    --space-xl: 2rem;     /* 32px */
    --space-2xl: 3rem;    /* 48px */
    --space-3xl: 4rem;    /* 64px */
    
    /* --- Typography Scale --- */
    --text-xs: 0.75rem;    /* 12px */
    --text-sm: 0.875rem;   /* 14px */
    --text-base: 1rem;     /* 16px */
    --text-lg: 1.125rem;   /* 18px */
    --text-xl: 1.25rem;    /* 20px */
    --text-2xl: 1.5rem;    /* 24px */
    --text-3xl: 1.875rem;  /* 30px */
    --text-4xl: 2.25rem;   /* 36px */
    --text-5xl: 3rem;      /* 48px */
    --text-6xl: 3.75rem;   /* 60px */
    
    /* --- Animation --- */
    --ease-out: cubic-bezier(0.16, 1, 0.3, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --duration-fast: 150ms;
    --duration-base: 250ms;
    --duration-slow: 350ms;

  /* --- Radius --- */
    --radius-sm: 0.375rem;  /* 6px */
    --radius-md: 0.5rem;    /* 8px */
    --radius-lg: 0.75rem;   /* 12px */
    --radius-xl: 1rem;      /* 16px */
    --radius-2xl: 1.5rem;   /* 24px */
    --radius-full: 9999px;
  }

  /* Dark Mode */
  [data-theme="dark"] {
    --bg-primary: var(--neutral-950);
    --bg-secondary: var(--neutral-900);
    --bg-tertiary: var(--neutral-800);
    --bg-elevated: var(--neutral-900);
    --bg-inverse: var(--white);
    
    --text-primary: var(--white);
    --text-secondary: var(--neutral-200);  /* Improved from 300 for better contrast */
    --text-tertiary: var(--neutral-300);   /* Improved from 400 for better contrast */
    --text-placeholder: var(--neutral-400); /* Dedicated placeholder color for dark mode */
    --text-disabled: var(--neutral-500);    /* Dedicated disabled text color for dark mode */
    --text-inverse: var(--neutral-950);
    
    --border-primary: var(--neutral-800);
    --border-secondary: var(--neutral-700);
    
    --shadow-xs: 0 1px 2px rgb(0 0 0 / 0.2);
    --shadow-sm: 0 2px 4px rgb(0 0 0 / 0.3);
    --shadow-md: 0 4px 12px rgb(0 0 0 / 0.4);
    --shadow-lg: 0 8px 24px rgb(0 0 0 / 0.5);
    --shadow-xl: 0 16px 48px rgb(0 0 0 / 0.6);
  }

  /* System Font Stack */
  html {
    font-family: -apple-system, BlinkMacSystemFont, "SF Pro Display", "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    font-feature-settings: "kern" 1, "liga" 1, "calt" 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
  }

  /* Smooth Scrolling */
  html {
    scroll-behavior: smooth;
  }

  /* Focus Visible */
  :focus-visible {
    outline: 2px solid rgb(var(--brand-blue));
    outline-offset: 2px;
  }

  /* Selection */
  ::selection {
    background: rgb(var(--brand-blue) / 0.2);
    color: rgb(var(--text-primary));
  }
}

@layer components {
  /* --- Premium Card Component --- */
  .card-premium {
    @apply relative overflow-hidden rounded-2xl;
    background: rgb(var(--bg-elevated));
    border: 1px solid rgb(var(--border-primary));
    box-shadow: var(--shadow-sm);
    transition: all var(--duration-base) var(--ease-out);
  }
  
  .card-premium:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
    border-color: rgb(var(--border-secondary));
  }
  
  /* --- Glass Card Component --- */
  .card-glass {
    @apply relative overflow-hidden rounded-2xl;
    background: rgb(var(--bg-elevated) / 0.7);
    backdrop-filter: blur(20px);
    border: 1px solid rgb(var(--border-primary) / 0.5);
    box-shadow: var(--shadow-md);
  }
  
  /* --- Primary Button --- */
  .btn-primary {
    @apply relative inline-flex items-center justify-center px-6 py-3 text-base font-semibold rounded-xl;
    background: var(--gradient-premium);
    color: rgb(var(--white));
    box-shadow: 0 4px 14px rgb(var(--brand-blue) / 0.3);
    transition: all var(--duration-base) var(--ease-out);
    transform-style: preserve-3d;
  }
  
  .btn-primary::before {
    @apply absolute inset-0 rounded-xl;
    content: '';
    background: linear-gradient(to bottom, rgba(255,255,255,0.2), transparent);
    opacity: 0;
    transition: opacity var(--duration-base) var(--ease-out);
  }
  
  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgb(var(--brand-blue) / 0.4);
  }
  
  .btn-primary:hover::before {
    opacity: 1;
  }
  
  .btn-primary:active {
    transform: translateY(0);
  }
  
  /* --- Secondary Button --- */
  .btn-secondary {
    @apply relative inline-flex items-center justify-center px-6 py-3 text-base font-semibold rounded-xl;
    background: rgb(var(--bg-secondary));
    color: rgb(var(--text-primary));
    border: 1px solid rgb(var(--border-primary));
    transition: all var(--duration-base) var(--ease-out);
  }
  
  .btn-secondary:hover {
    background: rgb(var(--bg-tertiary));
    border-color: rgb(var(--border-secondary));
    transform: translateY(-1px);
  }
  
  /* --- Input Field --- */
  .input-premium {
    @apply w-full px-4 py-3 text-base rounded-xl;
    background: rgb(var(--bg-elevated));
    border: 1px solid rgb(var(--border-primary));
    color: rgb(var(--text-primary));
    transition: all var(--duration-fast) var(--ease-out);
  }
  
  .input-premium::placeholder {
    color: rgb(var(--text-placeholder));
  }
  
  .input-premium:hover {
    border-color: rgb(var(--border-secondary));
    background: rgb(var(--bg-secondary));
  }
  
  .input-premium:focus {
    outline: none;
    border-color: rgb(var(--brand-blue));
    background: rgb(var(--bg-elevated));
    box-shadow: 0 0 0 3px rgb(var(--brand-blue) / 0.1);
  }
  
  .input-premium:disabled {
    background: rgb(var(--bg-tertiary));
    color: rgb(var(--text-disabled));
    border-color: rgb(var(--border-primary));
    cursor: not-allowed;
  }
  
  /* --- Badge --- */
  .badge {
    @apply inline-flex items-center px-3 py-1 text-xs font-medium rounded-full;
    background: rgb(var(--bg-tertiary));
    color: rgb(var(--text-secondary));
  }
  
  .badge-success {
    background: rgb(var(--brand-green) / 0.1);
    color: rgb(var(--brand-green));
  }
  
  .badge-warning {
    background: rgb(var(--brand-yellow) / 0.1);
    color: rgb(var(--brand-yellow));
  }
  
  .badge-error {
    background: rgb(var(--brand-red) / 0.1);
    color: rgb(var(--brand-red));
  }
  
  /* --- Metric Display --- */
  .metric-display {
    @apply relative overflow-hidden;
  }
  
  .metric-value {
    @apply text-4xl font-bold tracking-tight;
    font-variant-numeric: tabular-nums;
    background: var(--gradient-performance);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .metric-label {
    @apply text-sm font-medium;
    color: rgb(var(--text-tertiary));
    letter-spacing: 0.05em;
  }
  
  /* --- Loading States --- */
  .skeleton {
    @apply relative overflow-hidden;
    background: rgb(var(--bg-tertiary));
  }
  
  .skeleton::after {
    @apply absolute inset-0;
    content: '';
    background: linear-gradient(
      90deg,
      transparent,
      rgb(var(--bg-secondary) / 0.5),
      transparent
    );
    animation: skeleton-wave 2s ease-in-out infinite;
  }
  
  @keyframes skeleton-wave {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }
  
  /* --- Animations --- */
  .fade-in {
    animation: fadeIn var(--duration-slow) var(--ease-out);
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .slide-up {
    animation: slideUp var(--duration-base) var(--ease-out);
  }
  
  @keyframes slideUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  /* --- Responsive Container --- */
  .container-responsive {
    @apply w-full px-4 mx-auto;
    max-width: 1440px;
  }
  
  @media (min-width: 640px) {
    .container-responsive { @apply px-6; }
  }
  
  @media (min-width: 1024px) {
    .container-responsive { @apply px-8; }
  }
  
  /* --- Grid System --- */
  .grid-responsive {
    @apply grid gap-4;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  }
  
  @media (min-width: 768px) {
    .grid-responsive { @apply gap-6; }
  }
  
  /* --- Performance Optimizations --- */
  .gpu-accelerated {
    transform: translateZ(0);
    will-change: transform;
    backface-visibility: hidden;
  }
  
  .scroll-smooth {
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
    overscroll-behavior: contain;
  }
}

@layer utilities {
  /* --- Text Gradients --- */
  .text-gradient-performance {
    background: var(--gradient-performance);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .text-gradient-premium {
    background: var(--gradient-premium);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  /* --- Backdrop Filters --- */
  .backdrop-blur-premium {
    backdrop-filter: blur(20px) saturate(180%);
    -webkit-backdrop-filter: blur(20px) saturate(180%);
  }
  
  /* --- Custom Shadows --- */
  .shadow-glow-blue {
    box-shadow: 0 0 40px rgb(var(--brand-blue) / 0.3);
  }
  
  .shadow-glow-orange {
    box-shadow: 0 0 40px rgb(var(--brand-orange) / 0.3);
  }
  
  /* --- Hover Effects --- */
  .hover-lift {
    transition: transform var(--duration-base) var(--ease-out);
  }
  
  .hover-lift:hover {
    transform: translateY(-4px);
  }
  
  /* --- Loading Spinner --- */
  .spinner {
    @apply inline-block w-5 h-5 border-2 rounded-full;
    border-color: rgb(var(--brand-blue) / 0.2);
    border-top-color: rgb(var(--brand-blue));
    animation: spin 0.8s linear infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  /* --- Responsive Typography --- */
  .text-responsive-xs { font-size: clamp(0.75rem, 1.5vw, 0.875rem); }
  .text-responsive-sm { font-size: clamp(0.875rem, 2vw, 1rem); }
  .text-responsive-base { font-size: clamp(1rem, 2.5vw, 1.125rem); }
  .text-responsive-lg { font-size: clamp(1.125rem, 3vw, 1.25rem); }
  .text-responsive-xl { font-size: clamp(1.25rem, 3.5vw, 1.5rem); }
  .text-responsive-2xl { font-size: clamp(1.5rem, 4vw, 2rem); }
  .text-responsive-3xl { font-size: clamp(1.875rem, 5vw, 2.5rem); }
  .text-responsive-4xl { font-size: clamp(2.25rem, 6vw, 3rem); }
  .text-responsive-5xl { font-size: clamp(3rem, 8vw, 4rem); }
  
  /* --- Aspect Ratios --- */
  .aspect-golden { aspect-ratio: 1.618 / 1; }
  .aspect-photo { aspect-ratio: 3 / 2; }
  .aspect-hero { aspect-ratio: 21 / 9; }
}

/* --- Legacy Support & Additional Form Styles --- */
.input-field, select.input-field, input[type="text"], input[type="email"] {
  @apply w-full px-4 py-3 text-base rounded-xl;
  background: rgb(var(--bg-elevated)) !important;
  border: 1px solid rgb(var(--border-primary)) !important;
  color: rgb(var(--text-primary)) !important;
  transition: all var(--duration-fast) var(--ease-out);
}

.input-field::placeholder, input::placeholder {
  color: rgb(var(--text-placeholder)) !important;
}

.input-field:hover {
  border-color: rgb(var(--border-secondary)) !important;
  background: rgb(var(--bg-secondary)) !important;
}

.input-field:focus {
  outline: none !important;
  border-color: rgb(var(--brand-blue)) !important;
  background: rgb(var(--bg-elevated)) !important;
  box-shadow: 0 0 0 3px rgb(var(--brand-blue) / 0.1) !important;
}

/* Form Labels */
.form-label, .mobile-label {
  @apply block text-sm font-medium mb-2;
  color: rgb(var(--text-secondary)) !important;
}

/* Card Styles */
.card {
  @apply relative overflow-hidden rounded-2xl p-6;
  background: rgb(var(--bg-elevated));
  border: 1px solid rgb(var(--border-primary));
  box-shadow: var(--shadow-sm);
  transition: all var(--duration-base) var(--ease-out);
}

.card:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
  border-color: rgb(var(--border-secondary));
}

/* Override for cards containing dropdowns - allows dropdown content to be visible outside card */
.card:has(.searchable-dropdown),
.card.dropdown-container {
  overflow: visible !important;
}

/* Ensure searchable dropdowns appear above all other content */
.searchable-dropdown {
  z-index: 9999 !important;
  position: relative;
}

/* Button Enhancements */
.btn-primary:disabled, .btn-secondary:disabled {
  background: rgb(var(--bg-tertiary)) !important;
  color: rgb(var(--text-disabled)) !important;
  border-color: rgb(var(--border-primary)) !important;
  cursor: not-allowed !important;
  transform: none !important;
  box-shadow: none !important;
}

/* Mobile Label */
.mobile-label {
  @apply block text-sm font-medium mb-2;
  color: rgb(var(--text-secondary)) !important;
}

/* Better contrast for spans and divs */
span, div, p {
  color: inherit;
}

/* Ensure proper text hierarchy */
h1, h2, h3, h4, h5, h6 {
  color: rgb(var(--text-primary)) !important;
}

/* Placeholder text for all inputs */
input::placeholder, textarea::placeholder {
  color: rgb(var(--text-placeholder)) !important;
  opacity: 1;
}

/* Dropdown option items */
.cursor-pointer.selected {
  background: rgb(var(--brand-blue)) !important;
  color: white !important;
}

.cursor-pointer:hover {
  background: rgb(var(--bg-secondary)) !important;
}

/* --- Custom Scrollbar --- */
::-webkit-scrollbar {
  width: 12px;
  height: 12px;
}

::-webkit-scrollbar-track {
  background: rgb(var(--bg-secondary));
}

::-webkit-scrollbar-thumb {
  background: rgb(var(--text-tertiary) / 0.3);
  border-radius: 6px;
  border: 3px solid rgb(var(--bg-secondary));
}

::-webkit-scrollbar-thumb:hover {
  background: rgb(var(--text-tertiary) / 0.5);
}

/* --- Print Styles --- */
@media print {
  .no-print { display: none !important; }
  
  body {
    font-size: 12pt;
    line-height: 1.5;
    color: black;
    background: white;
  }
  
  .card-premium {
    break-inside: avoid;
    page-break-inside: avoid;
  }
}

/* --- High Contrast Mode --- */
@media (prefers-contrast: high) {
  :root {
    --border-primary: var(--neutral-400);
    --border-secondary: var(--neutral-500);
  }
  
  .btn-primary {
    border: 2px solid currentColor;
  }
}

/* --- Reduced Motion --- */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}



================================================================================
END OF CRANKSMITH SOURCE CODE BUNDLE
================================================================================
